<!DOCTYPE html>
<html class="theme">
<head>
    <meta charset="utf-8">
    
    <meta name="description" content="Cmd Markdown 编辑阅读器，支持实时同步预览，区分写作和阅读模式，支持在线存储，分享文稿网址。">
    <meta name="author" content="Jiawei Zhang">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    
    <title>Golang编程百例 - 作业部落 Cmd Markdown 编辑阅读器</title>


    <link href="https://www.zybuluo.com/static/img/favicon.png" type="image/x-icon" rel="icon">

    <link href="https://www.zybuluo.com/static/assets/9b84e41b.base.lib.min.css" rel="stylesheet" media="screen">

    <link href="https://www.zybuluo.com/static/icomoon/style.css" rel="stylesheet">
    <link href="https://www.zybuluo.com/static/font-awesome/css/font-awesome.css" rel="stylesheet">

    
    <!-- id="prettify-style" will be used to get the link element below and change href to change prettify code style, so it can't be in beginmin/endmin block. -->
    <link id="prettify-style" href="https://www.zybuluo.com/static/editor/libs/google-code-prettify/prettify-cmd.css" type="text/css" rel="stylesheet">
    <link href="https://www.zybuluo.com/static/assets/mdeditor/6656c189.layout.min.css" rel="stylesheet" media="screen">


    

    <script>
      (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
      (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
      m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
      })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

      ga('create', 'UA-44461741-1', 'zybuluo.com');
      ga('send', 'pageview');
    </script>
</head>

<body class="theme">


    <!-- zybuluo's body -->
    







<!-- mdeditor's body -->






<div id="editor-reader-full" class="editor-reader-full-shown" style="position: static; padding-right: 75px">
    <div id="reader-full-topInfo" class="reader-full-topInfo-shown">
        <span>
            <code>@Gestapo</code>
        </span>
        <code><span class="article-updated-date">2014-09-11 18:17</span></code>
        <code><span>字数 </span><span class="article-characters">26149</span></code>
        <code><span>阅读 </span><span class="article-read">7177</span></code>
    </div>
    <div id="wmd-preview" class="wmd-preview wmd-preview-full-reader"><div class="md-section-divider"></div>

<div class="md-section-divider"></div>

<h1 id="golang编程百例">Golang编程百例</h1>

<p>作者 <a href="http://weibo.com/u/2732911514" target="_blank">@GoGestapo</a> <br>
<code>Golang</code></p>

<hr>

<div class="md-section-divider"></div>

<h2 id="说明"><strong>说明</strong></h2>

<p>本文初级篇内容依据《C语言经典算法100例》编写，提高篇内容依据《C语言趣味编程100例》编写，可以作为Go语言学习中的小测验。 <br>
由于有些题目利用到C语言特性，针对这些题目只能尽可能的替换成Go语言写法。</p>

<div class="md-section-divider"></div>

<h2 id="目录"><strong>目录</strong></h2>

<p><div class="toc">
<ul>
<li><a href="#golang编程百例">Golang编程百例</a><ul>
<li><a href="#说明">说明</a></li>
<li><a href="#目录">目录</a></li>
<li><a href="#初级篇">初级篇</a><ul>
<li><a href="#程序-01数字排列组合">程序 01：数字排列组合</a></li>
<li><a href="#程序-02阶梯利润分配">程序 02：阶梯利润分配</a></li>
<li><a href="#程序-03完全平方数">程序 03：完全平方数</a></li>
<li><a href="#程序-04这一年的第几天">程序 04：这一年的第几天</a></li>
<li><a href="#程序-05数字排序">程序 05：数字排序</a></li>
<li><a href="#程序-06打印图形">程序 06：打印图形</a></li>
<li><a href="#程序-07输出特殊图案">程序 07：输出特殊图案</a></li>
<li><a href="#程序-0899-口诀">程序 08：9*9 口诀</a></li>
<li><a href="#程序-09象棋棋盘">程序 09：象棋棋盘</a></li>
<li><a href="#程序-10打印楼梯">程序 10：打印楼梯</a></li>
<li><a href="#程序-11兔子问题">程序 11：兔子问题</a></li>
<li><a href="#程序-12求素数">程序 12：求素数</a></li>
<li><a href="#程序-13水仙花数">程序 13：水仙花数</a></li>
<li><a href="#程序-14分解质因数">程序 14：分解质因数</a></li>
<li><a href="#程序-15三元表达式">程序 15：三元表达式</a></li>
<li><a href="#程序-16最大公约数和最小公倍数">程序 16：最大公约数和最小公倍数</a></li>
<li><a href="#程序-17统计字符个数">程序 17：统计字符个数</a></li>
<li><a href="#程序-18累加特殊数">程序 18：累加特殊数</a></li>
<li><a href="#程序-19因子之和">程序 19：因子之和</a></li>
<li><a href="#程序-20自由落体">程序 20：自由落体</a></li>
<li><a href="#程序-21猴子吃桃">程序 21：猴子吃桃</a></li>
<li><a href="#程序-22找出对手">程序 22：找出对手</a></li>
<li><a href="#程序-23打印菱形">程序 23：打印菱形</a></li>
<li><a href="#程序-24分数序列">程序 24：分数序列</a></li>
<li><a href="#程序-25求阶层和">程序 25：求阶层和</a></li>
<li><a href="#程序-26递归求阶层">程序 26：递归求阶层</a></li>
<li><a href="#程序-27反序输出字符">程序 27：反序输出字符</a></li>
<li><a href="#程序-28推出年龄">程序 28：推出年龄</a></li>
<li><a href="#程序-29计算数字">程序 29：计算数字</a></li>
<li><a href="#程序-30找出回文数">程序 30：找出回文数</a></li>
<li><a href="#程序-31检索字符串">程序 31：检索字符串</a></li>
<li><a href="#程序-32改变控制台颜色">程序 32：改变控制台颜色</a></li>
<li><a href="#程序-33gotoxy与-clrscr函数">程序 33：gotoxy()与 clrscr()函数</a></li>
<li><a href="#程序-34函数调用">程序 34：函数调用</a></li>
<li><a href="#程序-35文本颜色设置">程序 35：文本颜色设置</a></li>
<li><a href="#程序-36求素数">程序 36：求素数</a></li>
<li><a href="#程序-37求最大数">程序 37：求最大数</a></li>
<li><a href="#程序-38对角线之和">程序 38：对角线之和</a></li>
<li><a href="#程序-39插入元素">程序 39：插入元素</a></li>
<li><a href="#程序-40数组逆序输出">程序 40：数组逆序输出</a></li>
<li><a href="#程序-41位运算">程序 41：位运算</a></li>
<li><a href="#程序-42">程序 42：</a></li>
<li><a href="#程序-43">程序 43：</a></li>
<li><a href="#程序-44">程序 44：</a></li>
<li><a href="#程序-45">程序 45：</a></li>
<li><a href="#程序-46">程序 46：</a></li>
<li><a href="#程序-47">程序 47：</a></li>
<li><a href="#程序-68">程序 68：</a></li>
<li><a href="#程序-69">程序 69：</a></li>
<li><a href="#程序-72">程序 72：</a></li>
<li><a href="#程序-73">程序 73：</a></li>
<li><a href="#程序-74">程序 74：</a></li>
<li><a href="#程序-76">程序 76：</a></li>
<li><a href="#程序-80">程序 80：</a></li>
<li><a href="#程序-81">程序 81：</a></li>
<li><a href="#程序-82">程序 82：</a></li>
<li><a href="#程序-83">程序 83：</a></li>
<li><a href="#程序-84">程序 84：</a></li>
<li><a href="#程序-85">程序 85：</a></li>
<li><a href="#程序-88">程序 88：</a></li>
<li><a href="#程序-89">程序 89：</a></li>
<li><a href="#程序-94">程序 94：</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</p>

<div class="md-section-divider"></div>

<h2 id="初级篇">初级篇</h2>

<div class="md-section-divider"></div>

<h3 id="程序-01数字排列组合"><strong>程序 01：数字排列组合</strong></h3>

<p>题目：有 1、2、3、4 个数字，能组成多少个互不相同且无重复数字的三位数？都是多少？  <br>
1.程序分析：可填在百位、十位、个位的数字都是 1、2、3、4。组成所有的排列后再去  <br>
掉不满足条件的排列。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="com">/*以下为三重循环*/</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">5</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">5</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">            </span><span class="kwd">for</span><span class="pln"> k </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> k </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">5</span><span class="pun">;</span><span class="pln"> k</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">                </span><span class="com">/*确保 i 、j 、k 三位互不相同*/</span></code></li><li class="L2"><code class="language-golang"><span class="pln">                </span><span class="kwd">if</span><span class="pln"> i </span><span class="pun">!=</span><span class="pln"> k </span><span class="pun">&amp;&amp;</span><span class="pln"> i </span><span class="pun">!=</span><span class="pln"> j </span><span class="pun">&amp;&amp;</span><span class="pln"> j </span><span class="pun">!=</span><span class="pln"> k </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">                    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> k</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-02阶梯利润分配"><strong>程序 02：阶梯利润分配</strong></h3>

<p>题目：企业发放的奖金根据利润提成。利润(I)低于或等于10万元时，奖金可提成10%；利润高于10万元，低于20万元，低于10万元的部分按10%提成，高于10万元的部分，可提成7.5%；20万到40万之间时，高于20万元的部分，可提成5%；40万到60万之间时高于40万元的部分，可提成3%；60万到100万之间时，高于60万元的部分，可提成1.5%，高于100万元时，超过100万元的部分按1%提成，从键盘输入当月利润I，求应发放奖金总数？  <br>
1.程序分析：请利用数轴来分界，定位。注意定义时需把奖金定义成长整型。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> I float32 </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0.0</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> bonus float32 </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0.0</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Print</span><span class="pun">(</span><span class="str">"输入利润："</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%f\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">I</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> I </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1000000</span><span class="pun">:</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        bonus </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">I </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1000000</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0.01</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        I </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1000000</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> I </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">600000</span><span class="pun">:</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        bonus </span><span class="pun">+=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">I </span><span class="pun">-</span><span class="pln"> </span><span class="lit">600000</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0.015</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        I </span><span class="pun">=</span><span class="pln"> </span><span class="lit">600000</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> I </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">400000</span><span class="pun">:</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        bonus </span><span class="pun">+=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">I </span><span class="pun">-</span><span class="pln"> </span><span class="lit">400000</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0.03</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        I </span><span class="pun">=</span><span class="pln"> </span><span class="lit">400000</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> I </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">200000</span><span class="pun">:</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        bonus </span><span class="pun">+=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">I </span><span class="pun">-</span><span class="pln"> </span><span class="lit">200000</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0.05</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        I </span><span class="pun">=</span><span class="pln"> </span><span class="lit">200000</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> I </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">100000</span><span class="pun">:</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        bonus </span><span class="pun">+=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">I </span><span class="pun">-</span><span class="pln"> </span><span class="lit">100000</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0.075</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        I </span><span class="pun">=</span><span class="pln"> </span><span class="lit">100000</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">default</span><span class="pun">:</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        bonus </span><span class="pun">+=</span><span class="pln"> I </span><span class="pun">*</span><span class="pln"> </span><span class="lit">0.1</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"提成总计：%f\n"</span><span class="pun">,</span><span class="pln"> bonus</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-03完全平方数"><strong>程序 03：完全平方数</strong></h3>

<p>题目：一个整数，它加上 100 后是一个完全平方数，再加上 168 又是一个完全平方数，请问 <br>
该数是多少？  <br>
1.程序分析：在10万以内判断，先将该数加上100后再开方，再将该数加上268后再开方，如果开方后的结果满足如下条件，即是结果。请看具体分析：  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"math"</span></code></li><li class="L5"><code class="language-golang"><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        x </span><span class="pun">:=</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Sqrt</span><span class="pun">(</span><span class="pln">float64</span><span class="pun">(</span><span class="pln">i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">100</span><span class="pun">)))</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        y </span><span class="pun">:=</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Sqrt</span><span class="pun">(</span><span class="pln">float64</span><span class="pun">(</span><span class="pln">i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">268</span><span class="pun">)))</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> x</span><span class="pun">*</span><span class="pln">x </span><span class="pun">==</span><span class="pln"> i</span><span class="pun">+</span><span class="lit">100</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> y</span><span class="pun">*</span><span class="pln">y </span><span class="pun">==</span><span class="pln"> i</span><span class="pun">+</span><span class="lit">268</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"这个数字是%d\n"</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pln">            </span><span class="kwd">break</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        i</span><span class="pun">++</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-04这一年的第几天"><strong>程序 04：这一年的第几天</strong></h3>

<p>题目：输入某年某月某日，判断这一天是这一年的第几天？  <br>
1.程序分析：以3月5日为例，应该先把前两个月的加起来，然后再加上5天即本年的第几天，特殊情况，闰年且输入月份大于3时需考虑多加一天。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> y</span><span class="pun">,</span><span class="pln"> m</span><span class="pun">,</span><span class="pln"> d </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> days </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d%d%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">y</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">m</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">d</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d年%d月%d日"</span><span class="pun">,</span><span class="pln"> y</span><span class="pun">,</span><span class="pln"> m</span><span class="pun">,</span><span class="pln"> d</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">switch</span><span class="pln"> m </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">12</span><span class="pun">:</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">30</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">11</span><span class="pun">:</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">31</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">10</span><span class="pun">:</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">30</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">9</span><span class="pun">:</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">31</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">8</span><span class="pun">:</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">31</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">7</span><span class="pun">:</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">30</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">6</span><span class="pun">:</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">31</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">5</span><span class="pun">:</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">30</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">4</span><span class="pun">:</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">31</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">3</span><span class="pun">:</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">28</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">y</span><span class="pun">%</span><span class="lit">400</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> </span><span class="pun">(</span><span class="pln">y</span><span class="pun">%</span><span class="lit">4</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> y</span><span class="pun">%</span><span class="lit">100</span><span class="pln"> </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">            d </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">1</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">2</span><span class="pun">:</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        d </span><span class="pun">=</span><span class="pln"> </span><span class="lit">31</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        fallthrough</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">case</span><span class="pln"> </span><span class="lit">1</span><span class="pun">:</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        days </span><span class="pun">+=</span><span class="pln"> d</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"是今年的第%d天!\n"</span><span class="pun">,</span><span class="pln"> days</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-05数字排序"><strong>程序 05：数字排序</strong></h3>

<p>题目：输入三个整数 x,y,z，请把这三个数由小到大输出。  <br>
1.程序分析：我们想办法把最小的数放到 x 上，先将 x 与 y 进行比较，如果 x&gt;y 则将 x 与 y <br>
的值进行交换，然后再用 x 与 z 进行比较，如果 x&gt;z 则将 x 与 z 的值进行交换，这样能使 x 最小。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> x</span><span class="pun">,</span><span class="pln"> y</span><span class="pun">,</span><span class="pln"> z </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d%d%d"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">x</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">y</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">z</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> x </span><span class="pun">&gt;</span><span class="pln"> y </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        x</span><span class="pun">,</span><span class="pln"> y </span><span class="pun">=</span><span class="pln"> y</span><span class="pun">,</span><span class="pln"> x</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> x </span><span class="pun">&gt;</span><span class="pln"> z </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        x</span><span class="pun">,</span><span class="pln"> z </span><span class="pun">=</span><span class="pln"> z</span><span class="pun">,</span><span class="pln"> x</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> y </span><span class="pun">&gt;</span><span class="pln"> z </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        y</span><span class="pun">,</span><span class="pln"> z </span><span class="pun">=</span><span class="pln"> z</span><span class="pun">,</span><span class="pln"> y</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d&lt;%d&lt;%d\n"</span><span class="pun">,</span><span class="pln"> x</span><span class="pun">,</span><span class="pln"> y</span><span class="pun">,</span><span class="pln"> z</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-06打印图形"><strong>程序 06：打印图形</strong></h3>

<p>题目：用*号输出字母 C 的图案。  <br>
1.程序分析：可先用'*'号在纸上写出字母 C，再分行输出。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"*****\n"</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"**\n"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"*\n"</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"**\n"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"*****\n"</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-07输出特殊图案"><strong>程序 07：输出特殊图案</strong></h3>

<p>题目：输出特殊图案，请在 c 环境中运行，看一看，Very Beautiful!  <br>
1.程序分析：字符共有 256 个。不同字符，图形不一样。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> </span><span class="lit">176</span><span class="pun">,</span><span class="pln"> </span><span class="lit">219</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%c%c%c%c%c \n"</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%c%c%c%c%c \n"</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%c%c%c%c%c \n"</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%c%c%c%c%c \n"</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%c%c%c%c%c \n"</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-0899-口诀"><strong>程序 08：9*9 口诀</strong></h3>

<p>题目：输出 9*9 口诀。  <br>
1.程序分析：分行与列考虑，共 9 行 9 列，i 控制行，j 控制列。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d*%d=%-3d"</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">*</span><span class="pln">j</span><span class="pun">)</span><span class="pln"> </span><span class="com">/*-3d 表示左对齐，占 3 位*/</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"\n"</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-09象棋棋盘"><strong>程序 09：象棋棋盘</strong></h3>

<p>题目：要求输出国际象棋棋盘。  <br>
1.程序分析：用 i 控制行， j 来控制列，根据i+j的和的变化来控制输出黑方格，还是白方格。 <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> </span><span class="pun">(</span><span class="pln">i</span><span class="pun">+</span><span class="pln">j</span><span class="pun">)%</span><span class="lit">2</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">                fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"■"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">                fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"□"</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"\n"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-10打印楼梯"><strong>程序 10：打印楼梯</strong></h3>

<p>题目：打印楼梯，同时在楼梯上方打印笑脸。  <br>
1.程序分析：用 i 控制行，j 来控制列，j 根据 i 的变化来控制输出黑方格的个数。  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"■■"</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"☺\n"</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-11兔子问题"><strong>程序 11：兔子问题</strong></h3>

<p>题目：古典问题：有一对兔子，从出生后第3个月起每个月都生一对兔子，小兔子长到第三个月后每个月又生一对兔子，假如兔子都不死，问每个月的兔子总数为多少？  <br>
1.程序分析：  兔子的规律为数列 1,1,2,3,5,8,13,21....  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> m1</span><span class="pun">,</span><span class="pln"> m2 </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">12</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">m1</span><span class="pun">,</span><span class="pln"> m2</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        m1 </span><span class="pun">+=</span><span class="pln"> m2</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        m2 </span><span class="pun">+=</span><span class="pln"> m1</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-12求素数"><strong>程序 12：求素数</strong></h3>

<p>题目：判断 101-200 之间有多少个素数，并输出所有素数。  <br>
1.程序分析：判断素数的方法：用一个数分别去除2到sqrt(这个数)，如果能被整除，则表明此数不是素数，反之是素数。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"math"</span></code></li><li class="L5"><code class="language-golang"><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> k</span><span class="pun">,</span><span class="pln"> count </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">101</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">200</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        k </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Sqrt</span><span class="pun">(</span><span class="pln">float64</span><span class="pun">(</span><span class="pln">i</span><span class="pun">)))</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> k</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> i</span><span class="pun">%</span><span class="pln">j </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">                </span><span class="kwd">break</span></code></li><li class="L4"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> j </span><span class="pun">==</span><span class="pln"> k</span><span class="pun">+</span><span class="lit">1</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">i</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pln">            count</span><span class="pun">++</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"total"</span><span class="pun">,</span><span class="pln"> count</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-13水仙花数"><strong>程序 13：水仙花数</strong></h3>

<p>题目：打印出所有的“水仙花数”，所谓“水仙花数”是指一个三位数，其各位数字立方和等于该数本身。例如：153 是一个“水仙花数”，因为 153=1 的三次方＋5 的三次方＋3 的三次方。  <br>
1.程序分析：利用for循环控制100-999个数，每个数分解出个位，十位，百位。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> num </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">100</span><span class="pun">;</span><span class="pln"> num </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">;</span><span class="pln"> num</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        i </span><span class="pun">:=</span><span class="pln"> num </span><span class="pun">/</span><span class="pln"> </span><span class="lit">100</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        j </span><span class="pun">:=</span><span class="pln"> num </span><span class="pun">/</span><span class="pln"> </span><span class="lit">10</span><span class="pln"> </span><span class="pun">%</span><span class="pln"> </span><span class="lit">10</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        k </span><span class="pun">:=</span><span class="pln"> num </span><span class="pun">%</span><span class="pln"> </span><span class="lit">10</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> i</span><span class="pun">*</span><span class="pln">i</span><span class="pun">*</span><span class="pln">i</span><span class="pun">+</span><span class="pln">j</span><span class="pun">*</span><span class="pln">j</span><span class="pun">*</span><span class="pln">j</span><span class="pun">+</span><span class="pln">k</span><span class="pun">*</span><span class="pln">k</span><span class="pun">*</span><span class="pln">k </span><span class="pun">==</span><span class="pln"> num </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d^3+%d^3+%d^3=%d\n"</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> k</span><span class="pun">,</span><span class="pln"> num</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-14分解质因数"><strong>程序 14：分解质因数</strong></h3>

<p>题目：将一个正整数分解质因数。例如：输入 90,打印出 90=2*3*3*5。 <br>
程序分析：对n进行分解质因数，应先找到一个最小的质数k，然后按下述步骤完成：  <br>
(1)如果这个质数恰等于n，则说明分解质因数的过程已经结束，打印出即可。  <br>
(2)如果n&lt;&gt;k，但n能被k整除，则应打印出k的值，并用n除以k的商,作为新的正整数n,重复执行第一步。  <br>
(3)如果n不能被k整除，则用k+1作为k的值, 重复执行第一步。 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> n</span><span class="pun">,</span><span class="pln"> i </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"please input a number:"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">n</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d="</span><span class="pun">,</span><span class="pln"> n</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> n </span><span class="pun">!=</span><span class="pln"> i </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> n</span><span class="pun">%</span><span class="pln">i </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">                fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d*"</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">                n </span><span class="pun">=</span><span class="pln"> n </span><span class="pun">/</span><span class="pln"> i</span></code></li><li class="L6"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">                </span><span class="kwd">break</span></code></li><li class="L8"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d\n"</span><span class="pun">,</span><span class="pln"> n</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-15三元表达式"><strong>程序 15：三元表达式</strong></h3>

<p>题目：利用条件运算符的嵌套来完成此题：学习成绩&gt;=90 分的同学用 A 表示，60-89 分之 <br>
间的用 B 表示，60分以下的用C表示。  <br>
1.程序分析：(a&gt;b)?a:b 这是条件运算符的基本例子。  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">type B </span><span class="kwd">bool</span></code></li><li class="L7"><code class="language-golang"></code></li><li class="L8"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> score </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">score</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">B</span><span class="pun">(</span><span class="pln">score </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">90</span><span class="pun">).</span><span class="pln">C</span><span class="pun">(</span><span class="str">"A"</span><span class="pun">,</span><span class="pln"> B</span><span class="pun">(</span><span class="pln">score </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">60</span><span class="pun">).</span><span class="pln">C</span><span class="pun">(</span><span class="str">"B"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"C"</span><span class="pun">)))</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="com">//Go语言没有三元表达式,自写函数模仿。</span></code></li><li class="L4"><code class="language-golang"><span class="pln">func </span><span class="pun">(</span><span class="pln">b B</span><span class="pun">)</span><span class="pln"> C</span><span class="pun">(</span><span class="pln">t</span><span class="pun">,</span><span class="pln"> f </span><span class="kwd">interface</span><span class="pun">{})</span><span class="pln"> </span><span class="kwd">interface</span><span class="pun">{}</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> </span><span class="kwd">bool</span><span class="pun">(</span><span class="pln">b</span><span class="pun">)</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="kwd">true</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> t</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> f</span></code></li><li class="L9"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-16最大公约数和最小公倍数"><strong>程序 16：最大公约数和最小公倍数</strong></h3>

<p>题目：输入两个正整数 m 和 n，求其最大公约数和最小公倍数。 <br>
1.程序分析：利用辗除法。 <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> m</span><span class="pun">,</span><span class="pln"> n</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">,</span><span class="pln"> x </span><span class="kwd">int</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d%d"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">m</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">n</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    x </span><span class="pun">=</span><span class="pln"> m </span><span class="pun">*</span><span class="pln"> n</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> n </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        r </span><span class="pun">=</span><span class="pln"> m </span><span class="pun">%</span><span class="pln"> n</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        m </span><span class="pun">=</span><span class="pln"> n</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        n </span><span class="pun">=</span><span class="pln"> r</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d %d\n"</span><span class="pun">,</span><span class="pln"> m</span><span class="pun">,</span><span class="pln"> x</span><span class="pun">/</span><span class="pln">m</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-17统计字符个数"><strong>程序 17：统计字符个数</strong></h3>

<p>题目：输入一行字符，分别统计出其中英文字母、空格、数字和其它字符的个数。  <br>
1.程序分析：利用 while 语句, 条件为输入的字符不为' \n'.  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"bufio"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="str">"os"</span></code></li><li class="L6"><code class="language-golang"><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"></code></li><li class="L8"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> k</span><span class="pun">,</span><span class="pln"> l </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    reader </span><span class="pun">:=</span><span class="pln"> bufio</span><span class="pun">.</span><span class="typ">NewReader</span><span class="pun">(</span><span class="pln">os</span><span class="pun">.</span><span class="typ">Stdin</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    input</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> reader</span><span class="pun">.</span><span class="typ">ReadString</span><span class="pun">(</span><span class="str">'\n'</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> rune </span><span class="pun">:=</span><span class="pln"> range input </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        </span><span class="kwd">switch</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="kwd">case</span><span class="pln"> </span><span class="pun">(</span><span class="pln">rune </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="str">'A'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> rune </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="str">'Z'</span><span class="pun">):</span></code></li><li class="L5"><code class="language-golang"><span class="pln">            i</span><span class="pun">++</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        </span><span class="kwd">case</span><span class="pln"> </span><span class="pun">(</span><span class="pln">rune </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="str">'a'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> rune </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="str">'z'</span><span class="pun">):</span></code></li><li class="L7"><code class="language-golang"><span class="pln">            i</span><span class="pun">++</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="kwd">case</span><span class="pln"> rune </span><span class="pun">==</span><span class="pln"> </span><span class="str">' '</span><span class="pln"> </span><span class="pun">||</span><span class="pln"> rune </span><span class="pun">==</span><span class="pln"> </span><span class="str">'\t'</span><span class="pun">:</span></code></li><li class="L9"><code class="language-golang"><span class="pln">            j</span><span class="pun">++</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        </span><span class="kwd">case</span><span class="pln"> </span><span class="pun">(</span><span class="pln">rune </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="str">'0'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> rune </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="str">'9'</span><span class="pun">):</span></code></li><li class="L1"><code class="language-golang"><span class="pln">            k</span><span class="pun">++</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        </span><span class="kwd">default</span><span class="pun">:</span></code></li><li class="L3"><code class="language-golang"><span class="pln">            l</span><span class="pun">++</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"all in all:char=%d space=%d digit=%d others=%d\n"</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> k</span><span class="pun">,</span><span class="pln"> l</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-18累加特殊数"><strong>程序 18：累加特殊数</strong></h3>

<p>题目：求 s=a+aa+aaa+aaaa+aa...a 的值，其中 a 是一个数字。例如 2+22+222+2222+22222(此 <br>
时共有5个数相加)，几个数相加有键盘控制。  <br>
1.程序分析：关键是计算出每一项的值。  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> n</span><span class="pun">,</span><span class="pln"> count </span><span class="kwd">int</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> sn</span><span class="pun">,</span><span class="pln"> tn </span><span class="kwd">int</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"please input a and n "</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">a</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">n</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> count </span><span class="pun">&lt;</span><span class="pln"> n </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        tn </span><span class="pun">=</span><span class="pln"> tn </span><span class="pun">+</span><span class="pln"> a</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        sn </span><span class="pun">=</span><span class="pln"> sn </span><span class="pun">+</span><span class="pln"> tn</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        a </span><span class="pun">=</span><span class="pln"> a </span><span class="pun">*</span><span class="pln"> </span><span class="lit">10</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        count</span><span class="pun">++</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"a+aa+...=%d\n"</span><span class="pun">,</span><span class="pln"> sn</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-19因子之和"><strong>程序 19：因子之和</strong></h3>

<p>题目：一个数如果恰好等于它的因子之和，这个数就称为“完数”。例如 6=1＋2＋3.编程找出 1000 以内的所有完数。  <br>
1.  程序分析：请参照程序&lt;--上页程序 14.  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> n </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> n </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">1000</span><span class="pun">;</span><span class="pln"> n</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        m </span><span class="pun">:=</span><span class="pln"> n</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> n</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> n</span><span class="pun">%</span><span class="pln">i </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">                m </span><span class="pun">-=</span><span class="pln"> i</span></code></li><li class="L2"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> m </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">n</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-20自由落体"><strong>程序 20：自由落体</strong></h3>

<p>题目：一球从100米高度自由落下，每次落地后反跳回原高度的一半；再落下，求它在第10次落地时，共经过多少米？第10次反弹多高？  <br>
1.程序分析：见下面注释  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    s </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">100.0</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    h </span><span class="pun">:=</span><span class="pln"> s </span><span class="pun">/</span><span class="pln"> </span><span class="lit">2</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        s </span><span class="pun">+=</span><span class="pln"> </span><span class="lit">2</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> h</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        h </span><span class="pun">/=</span><span class="pln"> </span><span class="lit">2</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"the total of road is %f\n"</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"the tenth is %f meter\n"</span><span class="pun">,</span><span class="pln"> h</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-21猴子吃桃"><strong>程序 21：猴子吃桃</strong></h3>

<p>题目：猴子吃桃问题：猴子第一天摘下若干个桃子，当即吃了一半，还不瘾，又多吃了一个。第二天早上又将剩下的桃子吃掉一半，又多吃了一个。以后每天早上都吃了前一天剩下的一半零一个。到第 10 天早上想再吃时，见只剩下一个桃子了。求第一天共摘了多少。 <br>
1.程序分析：采取逆向思维的方法，从后往前推断。 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> x1</span><span class="pun">,</span><span class="pln"> x2</span><span class="pun">,</span><span class="pln"> day </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> day </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        x1 </span><span class="pun">=</span><span class="pln"> </span><span class="pun">(</span><span class="pln">x2 </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln"> </span><span class="lit">2</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        x2 </span><span class="pun">=</span><span class="pln"> x1</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        day</span><span class="pun">--</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"the total is %d\n"</span><span class="pun">,</span><span class="pln"> x1</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-22找出对手"><strong>程序 22：找出对手</strong></h3>

<p>题目：两个乒乓球队进行比赛，各出三人。甲队为a,b,c三人，乙队为x,y,z三人。已抽签决定比赛名单。有人向队员打听比赛的名单。a说他不和x比，c说他不和x,z比，请编程序找出三队赛手的名单。  <br>
1.程序分析：判断素数的方法：用一个数分别去除2到sqrt(这个数)，如果能被整除，则表明此数不是素数，反之是素数。 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> k int16 </span><span class="com">/*i 是 a 的对手，j 是 b 的对手，k 是 c 的对手*/</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="str">'x'</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="str">'z'</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="str">'x'</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="str">'z'</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> i </span><span class="pun">!=</span><span class="pln"> j </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">                </span><span class="kwd">for</span><span class="pln"> k </span><span class="pun">=</span><span class="pln"> </span><span class="str">'x'</span><span class="pun">;</span><span class="pln"> k </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="str">'z'</span><span class="pun">;</span><span class="pln"> k</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">                    </span><span class="kwd">if</span><span class="pln"> i </span><span class="pun">!=</span><span class="pln"> k </span><span class="pun">&amp;&amp;</span><span class="pln"> j </span><span class="pun">!=</span><span class="pln"> k </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">                        </span><span class="kwd">if</span><span class="pln"> i </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'x'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> k </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'x'</span><span class="pln"> </span><span class="pun">&amp;&amp;</span><span class="pln"> k </span><span class="pun">!=</span><span class="pln"> </span><span class="str">'z'</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">                            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"order is a--%c b--%c c--%c\n"</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> k</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">                        </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">                    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pln">                </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-23打印菱形"><strong>程序 23：打印菱形</strong></h3>

<p>题目：打印出如下图案（菱形） </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code><span class="pln">   </span><span class="pun">*</span></code></li><li class="L1"><code><span class="pln">  </span><span class="pun">***</span></code></li><li class="L2"><code><span class="pln"> </span><span class="pun">******</span></code></li><li class="L3"><code><span class="pun">********</span></code></li><li class="L4"><code><span class="pln"> </span><span class="pun">******</span></code></li><li class="L5"><code><span class="pln">  </span><span class="pun">***</span></code></li><li class="L6"><code><span class="pln">   </span><span class="pun">*</span></code></li></ol></pre>

<p>1.程序分析：先把图形分成两部分来看待，前四行一个规律，后三行一个规律，利用双重for循环，第一层控制行，第二层控制列。  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">,</span><span class="pln"> k </span><span class="kwd">int</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">-</span><span class="pln">i</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">" "</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> k </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> k </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">*</span><span class="pln">i</span><span class="pun">;</span><span class="pln"> k</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"*"</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"\n"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;=</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">" "</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> k </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> k </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">4</span><span class="pun">-</span><span class="lit">2</span><span class="pun">*</span><span class="pln">i</span><span class="pun">;</span><span class="pln"> k</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"*"</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"\n"</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-24分数序列"><strong>程序 24：分数序列</strong></h3>

<p>题目：有一分数序列：2/1，3/2，5/3，8/5，13/8，21/13...求出这个数列的前 20 项之和。 <br>
1.程序分析：请抓住分子与分母的变化规律。  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    number </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">20</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    a</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">,</span><span class="pln"> s </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">2.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1.0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0.0</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> n </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> n </span><span class="pun">&lt;=</span><span class="pln"> number</span><span class="pun">;</span><span class="pln"> n</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        s </span><span class="pun">=</span><span class="pln"> s </span><span class="pun">+</span><span class="pln"> a</span><span class="pun">/</span><span class="pln">b</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        a</span><span class="pun">,</span><span class="pln"> b </span><span class="pun">=</span><span class="pln"> a</span><span class="pun">+</span><span class="pln">b</span><span class="pun">,</span><span class="pln"> a </span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"sum is %9.6f\n"</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-25求阶层和"><strong>程序 25：求阶层和</strong></h3>

<p>题目：求 1+2!+3!+...+20!的和 <br>
1.程序分析：此程序只是把累加变成了累乘。  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    s</span><span class="pun">,</span><span class="pln"> t </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">1</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> n </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> n </span><span class="pun">&lt;=</span><span class="pln"> </span><span class="lit">20</span><span class="pun">;</span><span class="pln"> n</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        t </span><span class="pun">*=</span><span class="pln"> n</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        s </span><span class="pun">+=</span><span class="pln"> t</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"1+2!+3!...+20!=%d\n"</span><span class="pun">,</span><span class="pln"> s</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-26递归求阶层"><strong>程序 26：递归求阶层</strong></h3>

<p>题目：利用递归方法求 5!。 <br>
1.程序分析：递归公式：fn=fn_1*4! <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d!=%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">,</span><span class="pln"> fact</span><span class="pun">(</span><span class="lit">5</span><span class="pun">))</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"></code></li><li class="L0"><code class="language-golang"><span class="pln">func fact</span><span class="pun">(</span><span class="pln">n </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">(</span><span class="pln">sum </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> n </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    sum </span><span class="pun">=</span><span class="pln"> n </span><span class="pun">*</span><span class="pln"> fact</span><span class="pun">(</span><span class="pln">n</span><span class="pun">-</span><span class="lit">1</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span></code></li><li class="L6"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-27反序输出字符"><strong>程序 27：反序输出字符</strong></h3>

<p>题目：利用递归函数调用方式，将所输入的 5 个字符，以相反顺序打印出来。 <br>
1.程序分析： <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    putchar</span><span class="pun">(</span><span class="lit">5</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"></code></li><li class="L0"><code class="language-golang"><span class="pln">func putchar</span><span class="pun">(</span><span class="pln">n </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> c </span><span class="kwd">byte</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> n </span><span class="pun">&gt;=</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%c"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">c</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        putchar</span><span class="pun">(</span><span class="pln">n </span><span class="pun">-</span><span class="pln"> </span><span class="lit">1</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%c"</span><span class="pun">,</span><span class="pln"> c</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-28推出年龄"><strong>程序 28：推出年龄</strong></h3>

<p>题目：有5个人坐在一起，问第五个人多少岁？他说比第4个人大2岁。问第4个人岁数，他说比第3个人大2岁。问第三个人，又说比第2人大两岁。问第2个人，说比第一个人大两岁。最后问第一个人，他说是10岁。请问第五个人多大？ <br>
1.程序分析：利用递归的方法，递归分为回推和递推两个阶段。要想知道第五个人岁数，需知道第四人的岁数，依次类推，推到第一人（10 岁），再往回推。 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d\n"</span><span class="pun">,</span><span class="pln"> clacAge</span><span class="pun">(</span><span class="lit">5</span><span class="pun">))</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"></code></li><li class="L0"><code class="language-golang"><span class="pln">func clacAge</span><span class="pun">(</span><span class="pln">n </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">(</span><span class="pln">age </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> n </span><span class="pun">==</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        age </span><span class="pun">=</span><span class="pln"> </span><span class="lit">10</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        age </span><span class="pun">=</span><span class="pln"> clacAge</span><span class="pun">(</span><span class="pln">n</span><span class="pun">-</span><span class="lit">1</span><span class="pun">)</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> </span><span class="lit">2</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span></code></li><li class="L7"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-29计算数字"><strong>程序 29：计算数字</strong></h3>

<p>题目：给一个不多于5位的正整数，要求：一、求它是几位数，二、逆序打印出各位数字。 <br>
1.程序分析：学会分解出每一位数 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"math"</span></code></li><li class="L5"><code class="language-golang"><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> x </span><span class="kwd">int</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"请输入一个数字:"</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">x</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">5</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">--</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        r </span><span class="pun">:=</span><span class="pln"> x </span><span class="pun">/</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Pow10</span><span class="pun">(</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">))</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> r </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d是一个%d位数字.\n"</span><span class="pun">,</span><span class="pln"> x</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">            </span><span class="kwd">out</span><span class="pun">(</span><span class="pln">i</span><span class="pun">,</span><span class="pln"> x</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"\n"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pln">            </span><span class="kwd">break</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="pln">func </span><span class="kwd">out</span><span class="pun">(</span><span class="pln">n</span><span class="pun">,</span><span class="pln"> x </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> n </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="kwd">out</span><span class="pun">(</span><span class="pln">n</span><span class="pun">-</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> x</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    r </span><span class="pun">:=</span><span class="pln"> x </span><span class="pun">%</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Pow10</span><span class="pun">(</span><span class="pln">n</span><span class="pun">))</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Pow10</span><span class="pun">(</span><span class="pln">n</span><span class="pun">-</span><span class="lit">1</span><span class="pun">))</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d"</span><span class="pun">,</span><span class="pln"> r</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-30找出回文数"><strong>程序 30：找出回文数</strong></h3>

<p>题目：一个5位数，判断它是不是回文数。即12321是回文数，个位与万位相同，十位与千位相同。  <br>
1.程序分析：同 29 例 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"math"</span></code></li><li class="L5"><code class="language-golang"><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> x</span><span class="pun">,</span><span class="pln"> i </span><span class="kwd">int</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> max </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">5</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"请输入一个数字:"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">x</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> max</span><span class="pun">/</span><span class="lit">2</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        h </span><span class="pun">:=</span><span class="pln"> x </span><span class="pun">%</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Pow10</span><span class="pun">(</span><span class="pln">max</span><span class="pun">-</span><span class="pln">i</span><span class="pun">))</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Pow10</span><span class="pun">(</span><span class="pln">max</span><span class="pun">-</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">))</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        l </span><span class="pun">:=</span><span class="pln"> x </span><span class="pun">%</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Pow10</span><span class="pun">(</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">))</span><span class="pln"> </span><span class="pun">/</span><span class="pln"> </span><span class="kwd">int</span><span class="pun">(</span><span class="pln">math</span><span class="pun">.</span><span class="typ">Pow10</span><span class="pun">(</span><span class="pln">i</span><span class="pun">))</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> h </span><span class="pun">!=</span><span class="pln"> l </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d不是一个回文数.\n"</span><span class="pun">,</span><span class="pln"> x</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pln">            </span><span class="kwd">break</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> i </span><span class="pun">==</span><span class="pln"> max</span><span class="pun">/</span><span class="lit">2</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%d是一个回文数.\n"</span><span class="pun">,</span><span class="pln"> x</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-31检索字符串"><strong>程序 31：检索字符串</strong></h3>

<p>题目：请输入星期几的第一个字母来判断一下是星期几，如果第一个字母一样，则继续判断第二个字母。 <br>
1.程序分析：用情况语句比较好，如果第一个字母一样，则判断用情况语句或 if 语句判断第 <br>
二个字母。 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"strings"</span></code></li><li class="L5"><code class="language-golang"><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    inweek </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">[]</span><span class="kwd">string</span><span class="pun">{</span><span class="str">"Monday"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Tuesday"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Wednesday"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Thurday"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Friday"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Saturday"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"Sunday"</span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    instr </span><span class="pun">:=</span><span class="pln"> </span><span class="str">""</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"input a char:"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%s\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">instr</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    outweek</span><span class="pun">(</span><span class="pln">instr</span><span class="pun">,</span><span class="pln"> inweek</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"></code></li><li class="L5"><code class="language-golang"><span class="pln">func outweek</span><span class="pun">(</span><span class="pln">instr </span><span class="kwd">string</span><span class="pun">,</span><span class="pln"> inweek </span><span class="pun">[]</span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    nextstr </span><span class="pun">:=</span><span class="pln"> </span><span class="str">""</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    nextweek </span><span class="pun">:=</span><span class="pln"> make</span><span class="pun">([]</span><span class="kwd">string</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> value </span><span class="pun">:=</span><span class="pln"> range inweek </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        index </span><span class="pun">:=</span><span class="pln"> strings</span><span class="pun">.</span><span class="typ">Index</span><span class="pun">(</span><span class="pln">value</span><span class="pun">,</span><span class="pln"> instr</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> index </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">            nextweek </span><span class="pun">=</span><span class="pln"> append</span><span class="pun">(</span><span class="pln">nextweek</span><span class="pun">,</span><span class="pln"> value</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%s\n"</span><span class="pun">,</span><span class="pln"> nextweek</span><span class="pun">[</span><span class="lit">0</span><span class="pun">:])</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">nextweek</span><span class="pun">)</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"input next char:"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%s\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">nextstr</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        nextstr </span><span class="pun">=</span><span class="pln"> instr </span><span class="pun">+</span><span class="pln"> nextstr</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        outweek</span><span class="pun">(</span><span class="pln">nextstr</span><span class="pun">,</span><span class="pln"> nextweek</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-32改变控制台颜色"><strong>程序 32：改变控制台颜色</strong></h3>

<p>题目：Press any key to change color, do you want to try it. Please hurry up! <br>
1.程序分析： 使用Win API GetStdHandle和SetConsoleTextAttribute <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"syscall"</span></code></li><li class="L5"><code class="language-golang"><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">type </span><span class="pun">(</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    HANDLE uintptr</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    WORD   uint16</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    DWORD  uint32</span></code></li><li class="L1"><code class="language-golang"><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"></code></li><li class="L3"><code class="language-golang"><span class="kwd">const</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    STD_OUTPUT_HANDLE    </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0xFFFFFFF5</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    FOREGROUND_BLUE      </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x01</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    FOREGROUND_GREEN     </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x02</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    FOREGROUND_RED       </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x04</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    FOREGROUND_INTENSITY </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x08</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    BACKGROUND_BLUE      </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x10</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    BACKGROUND_GREEN     </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x20</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    BACKGROUND_RED       </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x40</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    BACKGROUND_INTENSITY </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x80</span></code></li><li class="L3"><code class="language-golang"><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"></code></li><li class="L5"><code class="language-golang"><span class="kwd">var</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    modkernel32                 </span><span class="pun">=</span><span class="pln"> syscall</span><span class="pun">.</span><span class="typ">NewLazyDLL</span><span class="pun">(</span><span class="str">"kernel32.dll"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    procGetStdHandle            </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"GetStdHandle"</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    procSetConsoleTextAttribute </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"SetConsoleTextAttribute"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"></code></li><li class="L1"><code class="language-golang"><span class="pln">func </span><span class="typ">GetStdHandle</span><span class="pun">(</span><span class="pln">nStdHandle DWORD</span><span class="pun">)</span><span class="pln"> HANDLE </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procGetStdHandle</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span><span class="pln">uintptr</span><span class="pun">(</span><span class="pln">nStdHandle</span><span class="pun">))</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> HANDLE</span><span class="pun">(</span><span class="pln">ret</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">func </span><span class="typ">SetConsoleTextAttribute</span><span class="pun">(</span><span class="pln">hConsoleOutput HANDLE</span><span class="pun">,</span><span class="pln"> wAttributes WORD</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procSetConsoleTextAttribute</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">hConsoleOutput</span><span class="pun">),</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">wAttributes</span><span class="pun">))</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> ret </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L0"><code class="language-golang"><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> color </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> color </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">8</span><span class="pun">;</span><span class="pln"> color</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        textbackground</span><span class="pun">(</span><span class="pln">color</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"This is color %d\n"</span><span class="pun">,</span><span class="pln"> color</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"Press any key to continue\n"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Scanln</span><span class="pun">()</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"></code></li><li class="L1"><code class="language-golang"><span class="pln">func textbackground</span><span class="pun">(</span><span class="pln">color </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    hOut </span><span class="pun">:=</span><span class="pln"> </span><span class="typ">GetStdHandle</span><span class="pun">(</span><span class="pln">STD_OUTPUT_HANDLE</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="typ">SetConsoleTextAttribute</span><span class="pun">(</span><span class="pln">hOut</span><span class="pun">,</span><span class="pln"> WORD</span><span class="pun">(</span><span class="pln">color</span><span class="pun">))</span></code></li><li class="L4"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-33gotoxy与-clrscr函数"><strong>程序 33：gotoxy()与 clrscr()函数</strong></h3>

<p>题目：学习 gotoxy()与 clrscr()函数  <br>
1.程序分析：  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"syscall"</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="str">"unsafe"</span></code></li><li class="L6"><code class="language-golang"><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"></code></li><li class="L8"><code class="language-golang"><span class="pln">type </span><span class="pun">(</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    HANDLE uintptr</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    WORD   uint16</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    DWORD  uint32</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    TCHAR  rune</span></code></li><li class="L3"><code class="language-golang"><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"></code></li><li class="L5"><code class="language-golang"><span class="kwd">const</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    STD_OUTPUT_HANDLE    </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0xFFFFFFF5</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    FOREGROUND_BLUE      </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x01</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    FOREGROUND_GREEN     </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x02</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    FOREGROUND_RED       </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x04</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    FOREGROUND_INTENSITY </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x08</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    BACKGROUND_BLUE      </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x10</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    BACKGROUND_GREEN     </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x20</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    BACKGROUND_RED       </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x40</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    BACKGROUND_INTENSITY </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x80</span></code></li><li class="L5"><code class="language-golang"><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">type COORD </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    X</span><span class="pun">,</span><span class="pln"> Y int16</span></code></li><li class="L9"><code class="language-golang"><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"></code></li><li class="L1"><code class="language-golang"><span class="pln">type SMALL_RECT </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="typ">Left</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Top</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Right</span><span class="pun">,</span><span class="pln"> </span><span class="typ">Bottom</span><span class="pln"> int16</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"></code></li><li class="L5"><code class="language-golang"><span class="pln">type CONSOLE_SCREEN_BUFFER_INFO </span><span class="kwd">struct</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="typ">DwSize</span><span class="pln">              COORD</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="typ">DwCursorPosition</span><span class="pln">    COORD</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="typ">WAttributes</span><span class="pln">         WORD</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="typ">SrWindow</span><span class="pln">            SMALL_RECT</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="typ">DwMaximumWindowSize</span><span class="pln"> COORD</span></code></li><li class="L1"><code class="language-golang"><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"></code></li><li class="L3"><code class="language-golang"><span class="kwd">var</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    modkernel32                    </span><span class="pun">=</span><span class="pln"> syscall</span><span class="pun">.</span><span class="typ">NewLazyDLL</span><span class="pun">(</span><span class="str">"kernel32.dll"</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    procFillConsoleOutputAttribute </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"FillConsoleOutputAttribute"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    procFillConsoleOutputCharacter </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"FillConsoleOutputCharacterW"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    procGetStdHandle               </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"GetStdHandle"</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    procGetConsoleScreenBufferInfo </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"GetConsoleScreenBufferInfo"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    procSetConsoleCursorPosition   </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"SetConsoleCursorPosition"</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    procSetConsoleTextAttribute    </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"SetConsoleTextAttribute"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"></code></li><li class="L3"><code class="language-golang"><span class="pln">func COORD2DWORD</span><span class="pun">(</span><span class="pln">c COORD</span><span class="pun">)</span><span class="pln"> DWORD </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> DWORD</span><span class="pun">(</span><span class="pln">int32</span><span class="pun">(</span><span class="pln">c</span><span class="pun">.</span><span class="pln">Y</span><span class="pun">)&lt;&lt;</span><span class="lit">16</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> int32</span><span class="pun">(</span><span class="pln">c</span><span class="pun">.</span><span class="pln">X</span><span class="pun">))</span></code></li><li class="L5"><code class="language-golang"><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">func </span><span class="typ">FillConsoleOutputAttribute</span><span class="pun">(</span><span class="pln">hConsoleOutput HANDLE</span><span class="pun">,</span><span class="pln"> wAttribute WORD</span><span class="pun">,</span><span class="pln"> nLength DWORD</span><span class="pun">,</span><span class="pln"> dwWriteCoord COORD</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln">DWORD </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> lpNumberOfAttrsWritten DWORD</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procFillConsoleOutputAttribute</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">hConsoleOutput</span><span class="pun">),</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">wAttribute</span><span class="pun">),</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">nLength</span><span class="pun">),</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">COORD2DWORD</span><span class="pun">(</span><span class="pln">dwWriteCoord</span><span class="pun">)),</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="kwd">unsafe</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pun">(&amp;</span><span class="pln">lpNumberOfAttrsWritten</span><span class="pun">)))</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> ret </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">nil</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">lpNumberOfAttrsWritten</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"></code></li><li class="L0"><code class="language-golang"><span class="pln">func </span><span class="typ">FillConsoleOutputCharacter</span><span class="pun">(</span><span class="pln">hConsoleOutput HANDLE</span><span class="pun">,</span><span class="pln"> cCharacter TCHAR</span><span class="pun">,</span><span class="pln"> nLength DWORD</span><span class="pun">,</span><span class="pln"> dwWriteCoord COORD</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln">DWORD </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> lpNumberOfAttrsWritten DWORD</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procFillConsoleOutputCharacter</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">hConsoleOutput</span><span class="pun">),</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">cCharacter</span><span class="pun">),</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">nLength</span><span class="pun">),</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">COORD2DWORD</span><span class="pun">(</span><span class="pln">dwWriteCoord</span><span class="pun">)),</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="kwd">unsafe</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pun">(&amp;</span><span class="pln">lpNumberOfAttrsWritten</span><span class="pun">)))</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> ret </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">nil</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">lpNumberOfAttrsWritten</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"></code></li><li class="L4"><code class="language-golang"><span class="pln">func </span><span class="typ">GetStdHandle</span><span class="pun">(</span><span class="pln">nStdHandle DWORD</span><span class="pun">)</span><span class="pln"> HANDLE </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procGetStdHandle</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span><span class="pln">uintptr</span><span class="pun">(</span><span class="pln">nStdHandle</span><span class="pun">))</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> HANDLE</span><span class="pun">(</span><span class="pln">ret</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"></code></li><li class="L9"><code class="language-golang"><span class="pln">func </span><span class="typ">GetConsoleScreenBufferInfo</span><span class="pun">(</span><span class="pln">hConsoleOutput HANDLE</span><span class="pun">)</span><span class="pln"> </span><span class="pun">*</span><span class="pln">CONSOLE_SCREEN_BUFFER_INFO </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> csbi CONSOLE_SCREEN_BUFFER_INFO</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procGetConsoleScreenBufferInfo</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">hConsoleOutput</span><span class="pun">),</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="kwd">unsafe</span><span class="pun">.</span><span class="typ">Pointer</span><span class="pun">(&amp;</span><span class="pln">csbi</span><span class="pun">)))</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> ret </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="kwd">nil</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">csbi</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"></code></li><li class="L0"><code class="language-golang"><span class="pln">func </span><span class="typ">SetConsoleCursorPosition</span><span class="pun">(</span><span class="pln">hConsoleOutput HANDLE</span><span class="pun">,</span><span class="pln"> dwCursorPosition COORD</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procSetConsoleCursorPosition</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span></code></li><li class="L2"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">hConsoleOutput</span><span class="pun">),</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">COORD2DWORD</span><span class="pun">(</span><span class="pln">dwCursorPosition</span><span class="pun">)))</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> ret </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L5"><code class="language-golang"><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">func </span><span class="typ">SetConsoleTextAttribute</span><span class="pun">(</span><span class="pln">hConsoleOutput HANDLE</span><span class="pun">,</span><span class="pln"> wAttributes WORD</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procSetConsoleTextAttribute</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">hConsoleOutput</span><span class="pun">),</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">wAttributes</span><span class="pun">))</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> ret </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"></code></li><li class="L4"><code class="language-golang"><span class="pln">func clrscr</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    hConsole </span><span class="pun">:=</span><span class="pln"> </span><span class="typ">GetStdHandle</span><span class="pun">(</span><span class="pln">STD_OUTPUT_HANDLE</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    coordScreen </span><span class="pun">:=</span><span class="pln"> COORD</span><span class="pun">{</span><span class="lit">0</span><span class="pun">,</span><span class="pln"> </span><span class="lit">0</span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> dwConSize DWORD</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> csbi </span><span class="pun">*</span><span class="pln">CONSOLE_SCREEN_BUFFER_INFO</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    csbi </span><span class="pun">=</span><span class="pln"> </span><span class="typ">GetConsoleScreenBufferInfo</span><span class="pun">(</span><span class="pln">hConsole</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    dwConSize </span><span class="pun">=</span><span class="pln"> DWORD</span><span class="pun">(</span><span class="pln">csbi</span><span class="pun">.</span><span class="typ">DwSize</span><span class="pun">.</span><span class="pln">X </span><span class="pun">*</span><span class="pln"> csbi</span><span class="pun">.</span><span class="typ">DwSize</span><span class="pun">.</span><span class="pln">Y</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="typ">FillConsoleOutputCharacter</span><span class="pun">(</span><span class="pln">hConsole</span><span class="pun">,</span><span class="pln"> TCHAR</span><span class="pun">(</span><span class="str">' '</span><span class="pun">),</span><span class="pln"> dwConSize</span><span class="pun">,</span><span class="pln"> coordScreen</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    csbi </span><span class="pun">=</span><span class="pln"> </span><span class="typ">GetConsoleScreenBufferInfo</span><span class="pun">(</span><span class="pln">hConsole</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="typ">FillConsoleOutputAttribute</span><span class="pun">(</span><span class="pln">hConsole</span><span class="pun">,</span><span class="pln"> csbi</span><span class="pun">.</span><span class="typ">WAttributes</span><span class="pun">,</span><span class="pln"> dwConSize</span><span class="pun">,</span><span class="pln"> coordScreen</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="typ">SetConsoleCursorPosition</span><span class="pun">(</span><span class="pln">hConsole</span><span class="pun">,</span><span class="pln"> coordScreen</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">func gotoxy</span><span class="pun">(</span><span class="pln">x</span><span class="pun">,</span><span class="pln"> y int16</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    loc </span><span class="pun">:=</span><span class="pln"> COORD</span><span class="pun">{</span><span class="pln">x</span><span class="pun">,</span><span class="pln"> y</span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    hConsole </span><span class="pun">:=</span><span class="pln"> </span><span class="typ">GetStdHandle</span><span class="pun">(</span><span class="pln">STD_OUTPUT_HANDLE</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="typ">SetConsoleCursorPosition</span><span class="pun">(</span><span class="pln">hConsole</span><span class="pun">,</span><span class="pln"> loc</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"></code></li><li class="L3"><code class="language-golang"><span class="pln">func textbackground</span><span class="pun">(</span><span class="pln">color </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    hOut </span><span class="pun">:=</span><span class="pln"> </span><span class="typ">GetStdHandle</span><span class="pun">(</span><span class="pln">STD_OUTPUT_HANDLE</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="typ">SetConsoleTextAttribute</span><span class="pun">(</span><span class="pln">hOut</span><span class="pun">,</span><span class="pln"> WORD</span><span class="pun">(</span><span class="pln">color</span><span class="pun">))</span></code></li><li class="L6"><code class="language-golang"><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"></code></li><li class="L8"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    clrscr</span><span class="pun">()</span><span class="pln"> </span><span class="com">/*清屏函数*/</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    textbackground</span><span class="pun">(</span><span class="lit">2</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    gotoxy</span><span class="pun">(</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">5</span><span class="pun">)</span><span class="pln"> </span><span class="com">/*定位函数*/</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"Output at row 5 column 1\n"</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    textbackground</span><span class="pun">(</span><span class="lit">3</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    gotoxy</span><span class="pun">(</span><span class="lit">20</span><span class="pun">,</span><span class="pln"> </span><span class="lit">10</span><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"Output at row 10 column 20\n"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-34函数调用"><strong>程序 34：函数调用</strong></h3>

<p>题目：练习函数调用 <br>
1.  程序分析：  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    noresult</span><span class="pun">()</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    ret </span><span class="pun">:=</span><span class="pln"> oneresult</span><span class="pun">()</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"存在1个返回值的函数"</span><span class="pun">,</span><span class="pln"> ret</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    _</span><span class="pun">,</span><span class="pln"> b </span><span class="pun">:=</span><span class="pln"> tworesult</span><span class="pun">()</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"存在2个返回值的函数"</span><span class="pun">,</span><span class="pln"> b</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    _</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">=</span><span class="pln"> threeresult</span><span class="pun">()</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"></code></li><li class="L5"><code class="language-golang"><span class="pln">func noresult</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"没有返回值的函数"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"></code></li><li class="L9"><code class="language-golang"><span class="pln">func oneresult</span><span class="pun">()</span><span class="pln"> </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"存在1个返回值的函数"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">1</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"></code></li><li class="L4"><code class="language-golang"><span class="pln">func tworesult</span><span class="pun">()</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">bool</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"存在2个返回值的函数"</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">2</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">true</span></code></li><li class="L7"><code class="language-golang"><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"></code></li><li class="L9"><code class="language-golang"><span class="pln">func threeresult</span><span class="pun">()</span><span class="pln"> </span><span class="pun">(</span><span class="kwd">int</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">bool</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">string</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="str">"存在3个返回值的函数"</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> </span><span class="lit">3</span><span class="pun">,</span><span class="pln"> </span><span class="kwd">false</span><span class="pun">,</span><span class="pln"> </span><span class="str">"错误"</span></code></li><li class="L2"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-35文本颜色设置"><strong>程序 35：文本颜色设置</strong></h3>

<p>题目：文本颜色设置 <br>
1.程序分析：使用Win API GetStdHandle和SetConsoleTextAttribute <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="str">"syscall"</span></code></li><li class="L5"><code class="language-golang"><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"></code></li><li class="L7"><code class="language-golang"><span class="pln">type </span><span class="pun">(</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    HANDLE uintptr</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    WORD   uint16</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    DWORD  uint32</span></code></li><li class="L1"><code class="language-golang"><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"></code></li><li class="L3"><code class="language-golang"><span class="kwd">const</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    STD_OUTPUT_HANDLE    </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0xFFFFFFF5</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    FOREGROUND_BLUE      </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x01</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    FOREGROUND_GREEN     </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x02</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    FOREGROUND_RED       </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x04</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    FOREGROUND_INTENSITY </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x08</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    BACKGROUND_BLUE      </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x10</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    BACKGROUND_GREEN     </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x20</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    BACKGROUND_RED       </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x40</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    BACKGROUND_INTENSITY </span><span class="pun">=</span><span class="pln"> </span><span class="lit">0x80</span></code></li><li class="L3"><code class="language-golang"><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"></code></li><li class="L5"><code class="language-golang"><span class="kwd">var</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    modkernel32                 </span><span class="pun">=</span><span class="pln"> syscall</span><span class="pun">.</span><span class="typ">NewLazyDLL</span><span class="pun">(</span><span class="str">"kernel32.dll"</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    procGetStdHandle            </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"GetStdHandle"</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    procSetConsoleTextAttribute </span><span class="pun">=</span><span class="pln"> modkernel32</span><span class="pun">.</span><span class="typ">NewProc</span><span class="pun">(</span><span class="str">"SetConsoleTextAttribute"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"></code></li><li class="L1"><code class="language-golang"><span class="pln">func </span><span class="typ">GetStdHandle</span><span class="pun">(</span><span class="pln">nStdHandle DWORD</span><span class="pun">)</span><span class="pln"> HANDLE </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procGetStdHandle</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span><span class="pln">uintptr</span><span class="pun">(</span><span class="pln">nStdHandle</span><span class="pun">))</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> HANDLE</span><span class="pun">(</span><span class="pln">ret</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">func </span><span class="typ">SetConsoleTextAttribute</span><span class="pun">(</span><span class="pln">hConsoleOutput HANDLE</span><span class="pun">,</span><span class="pln"> wAttributes WORD</span><span class="pun">)</span><span class="pln"> </span><span class="kwd">bool</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    ret</span><span class="pun">,</span><span class="pln"> _</span><span class="pun">,</span><span class="pln"> _ </span><span class="pun">:=</span><span class="pln"> procSetConsoleTextAttribute</span><span class="pun">.</span><span class="typ">Call</span><span class="pun">(</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">hConsoleOutput</span><span class="pun">),</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        uintptr</span><span class="pun">(</span><span class="pln">wAttributes</span><span class="pun">))</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">return</span><span class="pln"> ret </span><span class="pun">!=</span><span class="pln"> </span><span class="lit">0</span></code></li><li class="L0"><code class="language-golang"><span class="pun">}</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> color </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> color </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">16</span><span class="pun">;</span><span class="pln"> color</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        textcolor</span><span class="pun">(</span><span class="pln">color</span><span class="pun">)</span><span class="pln"> </span><span class="com">/*设置文本颜色*/</span></code></li><li class="L5"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"This is color %d\n"</span><span class="pun">,</span><span class="pln"> color</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        textcolor</span><span class="pun">(</span><span class="lit">128</span><span class="pln"> </span><span class="pun">+</span><span class="pln"> color</span><span class="pun">)</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"This is blinking\n"</span><span class="pun">)</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"></code></li><li class="L1"><code class="language-golang"><span class="pln">func textcolor</span><span class="pun">(</span><span class="pln">color </span><span class="kwd">int</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    hOut </span><span class="pun">:=</span><span class="pln"> </span><span class="typ">GetStdHandle</span><span class="pun">(</span><span class="pln">STD_OUTPUT_HANDLE</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="typ">SetConsoleTextAttribute</span><span class="pun">(</span><span class="pln">hOut</span><span class="pun">,</span><span class="pln"> WORD</span><span class="pun">(</span><span class="pln">color</span><span class="pun">))</span></code></li><li class="L4"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-36求素数"><strong>程序 36：求素数</strong></h3>

<p>题目：求 100 之内的素数  <br>
1.程序分析： <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">3</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">100</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="kwd">var</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">=</span><span class="pln"> </span><span class="lit">2</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> i</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> i</span><span class="pun">%</span><span class="pln">j </span><span class="pun">==</span><span class="pln"> </span><span class="lit">0</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">                </span><span class="kwd">break</span></code></li><li class="L2"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> i </span><span class="pun">==</span><span class="pln"> j </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Print</span><span class="pun">(</span><span class="pln">i</span><span class="pun">,</span><span class="pln"> </span><span class="str">" "</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-37求最大数"><strong>程序 37：求最大数</strong></h3>

<p>题目：对 10 个数进行排序 <br>
1.程序分析：可以利用选择法，即从后9个比较过程中，选择一个最小的与第一个元素交换，下次类推，即用第二个元素与后 8 个进行比较，并进行交换。  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> array </span><span class="pun">[</span><span class="lit">10</span><span class="pun">]</span><span class="kwd">int</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"array[%d]="</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">])</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">()</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">9</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">:=</span><span class="pln"> i </span><span class="pun">+</span><span class="pln"> </span><span class="lit">1</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> </span><span class="lit">9</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">            </span><span class="kwd">if</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-golang"><span class="pln">                array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">],</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">+</span><span class="lit">1</span><span class="pun">],</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">j</span><span class="pun">]</span></code></li><li class="L7"><code class="language-golang"><span class="pln">            </span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">            array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">+</span><span class="lit">1</span><span class="pun">],</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">array</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-38对角线之和"><strong>程序 38：对角线之和</strong></h3>

<p>题目：求一个 3*3 矩阵对角线元素之和  <br>
1.程序分析：利用双重for循环控制输入二维数组，再将a[i][i]累加后输出。 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">const</span><span class="pln"> max </span><span class="kwd">int</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> </span><span class="lit">3</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> array </span><span class="pun">[</span><span class="pln">max</span><span class="pun">][</span><span class="pln">max</span><span class="pun">]</span><span class="kwd">int</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> sum </span><span class="kwd">int</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> max</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-golang"><span class="pln">        </span><span class="kwd">for</span><span class="pln"> j </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> j </span><span class="pun">&lt;</span><span class="pln"> max</span><span class="pun">;</span><span class="pln"> j</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L2"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"array[%d][%d]="</span><span class="pun">,</span><span class="pln"> i</span><span class="pun">,</span><span class="pln"> j</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pln">            fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">][</span><span class="pln">j</span><span class="pun">])</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L6"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> max</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">        sum </span><span class="pun">+=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">][</span><span class="pln">i</span><span class="pun">]</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&lt;</span><span class="pln"> max</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        sum </span><span class="pun">+=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">][</span><span class="pln">max</span><span class="pun">-</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">]</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    </span><span class="kwd">if</span><span class="pln"> max</span><span class="pun">%</span><span class="lit">2</span><span class="pln"> </span><span class="pun">==</span><span class="pln"> </span><span class="lit">1</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-golang"><span class="pln">        sum </span><span class="pun">-=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">max</span><span class="pun">/</span><span class="lit">2</span><span class="pun">][</span><span class="pln">max</span><span class="pun">/</span><span class="lit">2</span><span class="pun">]</span></code></li><li class="L4"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L5"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">sum</span><span class="pun">)</span></code></li><li class="L6"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-39插入元素"><strong>程序 39：插入元素</strong></h3>

<p>题目：有一个已经排好序的数组。现输入一个数，要求按原来的规律将它插入数组中。 <br>
1.  程序分析：首先判断此数是否大于最后一个数，然后再考虑插入中间的数的情况，插入后此元素之后的数，依次后移一个位置。  <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> number </span><span class="kwd">int</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> array </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">11</span><span class="pun">]</span><span class="kwd">int</span><span class="pun">{</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">13</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16</span><span class="pun">,</span><span class="pln"> </span><span class="lit">19</span><span class="pun">,</span><span class="pln"> </span><span class="lit">28</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40</span><span class="pun">,</span><span class="pln"> </span><span class="lit">100</span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"insert a new number:"</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">number</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    array</span><span class="pun">[</span><span class="lit">10</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> number</span></code></li><li class="L2"><code class="language-golang"></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">10</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&gt;</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">--</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L4"><code class="language-golang"><span class="pln">        </span><span class="kwd">if</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-golang"><span class="pln">            array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">],</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span></code></li><li class="L6"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span><span class="pln"> </span><span class="kwd">else</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">            </span><span class="kwd">break</span></code></li><li class="L8"><code class="language-golang"><span class="pln">        </span><span class="pun">}</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">array</span><span class="pun">)</span></code></li><li class="L1"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-40数组逆序输出"><strong>程序 40：数组逆序输出</strong></h3>

<p>题目：将一个数组逆序输出。 <br>
1.程序分析：用第一个与最后一个交换。 <br>
2.程序源代码：</p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> array </span><span class="pun">=</span><span class="pln"> </span><span class="pun">[</span><span class="lit">10</span><span class="pun">]</span><span class="kwd">int</span><span class="pun">{</span><span class="lit">1</span><span class="pun">,</span><span class="pln"> </span><span class="lit">4</span><span class="pun">,</span><span class="pln"> </span><span class="lit">6</span><span class="pun">,</span><span class="pln"> </span><span class="lit">9</span><span class="pun">,</span><span class="pln"> </span><span class="lit">13</span><span class="pun">,</span><span class="pln"> </span><span class="lit">16</span><span class="pun">,</span><span class="pln"> </span><span class="lit">19</span><span class="pun">,</span><span class="pln"> </span><span class="lit">28</span><span class="pun">,</span><span class="pln"> </span><span class="lit">40</span><span class="pun">,</span><span class="pln"> </span><span class="lit">100</span><span class="pun">}</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    count </span><span class="pun">:=</span><span class="pln"> len</span><span class="pun">(</span><span class="pln">array</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    </span><span class="kwd">for</span><span class="pln"> i </span><span class="pun">:=</span><span class="pln"> </span><span class="lit">0</span><span class="pun">;</span><span class="pln"> i </span><span class="pun">&gt;</span><span class="pln"> count</span><span class="pun">/</span><span class="lit">2</span><span class="pun">;</span><span class="pln"> i</span><span class="pun">++</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-golang"><span class="pln">        array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">],</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">count</span><span class="pun">-</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">]</span><span class="pln"> </span><span class="pun">=</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">count</span><span class="pun">-</span><span class="pln">i</span><span class="pun">-</span><span class="lit">1</span><span class="pun">],</span><span class="pln"> array</span><span class="pun">[</span><span class="pln">i</span><span class="pun">]</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    </span><span class="pun">}</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Println</span><span class="pun">(</span><span class="pln">array</span><span class="pun">)</span></code></li><li class="L3"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-41位运算"><strong>程序 41：位运算</strong></h3>

<p>题目：取一个整数 a 从右端开始的 4～7 位。  <br>
程序分析：可以这样考虑：  <br>
(1)先使 a 右移 4 位。  <br>
(2)设置一个低 4 位全为 1,其余全为 0 的数。可用~(~0&lt;&lt;4)  <br>
(3)将上面二者进行&amp;运算。  <br>
2.程序源代码： </p>

<div class="md-section-divider"></div>

<pre class="prettyprint linenums prettyprinted" style=""><ol class="linenums"><li class="L0"><code class="language-golang"><span class="kwd">package</span><span class="pln"> main</span></code></li><li class="L1"><code class="language-golang"></code></li><li class="L2"><code class="language-golang"><span class="kwd">import</span><span class="pln"> </span><span class="pun">(</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    </span><span class="str">"fmt"</span></code></li><li class="L4"><code class="language-golang"><span class="pun">)</span></code></li><li class="L5"><code class="language-golang"></code></li><li class="L6"><code class="language-golang"><span class="pln">func main</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L7"><code class="language-golang"><span class="pln">    </span><span class="kwd">var</span><span class="pln"> a </span><span class="kwd">int</span></code></li><li class="L8"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"input a number:"</span><span class="pun">)</span></code></li><li class="L9"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Scanf</span><span class="pun">(</span><span class="str">"%d\n"</span><span class="pun">,</span><span class="pln"> </span><span class="pun">&amp;</span><span class="pln">a</span><span class="pun">)</span></code></li><li class="L0"><code class="language-golang"><span class="pln">    b </span><span class="pun">:=</span><span class="pln"> a </span><span class="pun">&gt;&gt;</span><span class="pln"> </span><span class="lit">4</span></code></li><li class="L1"><code class="language-golang"><span class="pln">    c </span><span class="pun">:=</span><span class="pln"> </span><span class="pun">^(^</span><span class="lit">0</span><span class="pln"> </span><span class="pun">&lt;&lt;</span><span class="pln"> </span><span class="lit">4</span><span class="pun">)</span></code></li><li class="L2"><code class="language-golang"><span class="pln">    d </span><span class="pun">:=</span><span class="pln"> b </span><span class="pun">&amp;</span><span class="pln"> c</span></code></li><li class="L3"><code class="language-golang"><span class="pln">    fmt</span><span class="pun">.</span><span class="typ">Printf</span><span class="pun">(</span><span class="str">"%o\n%o\n"</span><span class="pun">,</span><span class="pln"> a</span><span class="pun">,</span><span class="pln"> d</span><span class="pun">)</span></code></li><li class="L4"><code class="language-golang"><span class="pun">}</span></code></li></ol></pre>

<div class="md-section-divider"></div>

<h3 id="程序-42"><strong>程序 42：</strong></h3>

<p>题目：画图，学用 circle 画圆形。  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
/<em>circle</em>/  <br>
 "graphics.h"  <br>
main()  <br>
{int driver,mode,i;  <br>
float j=1,k=1;  <br>
driver=VGA;mode=VGAHI;  <br>
initgraph(&amp;driver,&amp;mode,"");  <br>
setbkcolor(YELLOW);  <br>
for(i=0;i&lt;=25;i++)  <br>
{  <br>
setcolor(8);  <br>
circle(310,250,k);  <br>
k=k+j;  <br>
j=j+0.3;  <br>
} <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-43"><strong>程序 43：</strong></h3>

<p>题目：画图，学用 line 画直线。  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
 "graphics.h"  <br>
main()  <br>
{int driver,mode,i;  <br>
float x0,y0,y1,x1;  <br>
float j=12,k;  <br>
driver=VGA;mode=VGAHI;  <br>
initgraph(&amp;driver,&amp;mode,"");  <br>
setbkcolor(GREEN);  <br>
x0=263;y0=263;y1=275;x1=275;  <br>
for(i=0;i&lt;=18;i++)  <br>
{  <br>
setcolor(5);  <br>
line(x0,y0,x0,y1);  <br>
x0=x0-5;  <br>
y0=y0-5;  <br>
x1=x1+5;  <br>
y1=y1+5;  <br>
j=j+10;  <br>
}  <br>
x0=263;y1=275;y0=263;  <br>
for(i=0;i&lt;=20;i++)  <br>
{  <br>
setcolor(5);  <br>
line(x0,y0,x0,y1);  <br>
x0=x0+5;  <br>
y0=y0+5;  <br>
y1=y1-5;  <br>
}  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-44"><strong>程序 44：</strong></h3>

<p>题目：画图，学用 rectangle 画方形。  <br>
1.程序分析：利用 for 循环控制 100-999 个数，每个数分解出个位，十位，百位。  <br>
2.程序源代码：  <br>
 "graphics.h"  <br>
main()  <br>
{int x0,y0,y1,x1,driver,mode,i;  <br>
driver=VGA;mode=VGAHI; <br>
initgraph(&amp;driver,&amp;mode,"");  <br>
setbkcolor(YELLOW);  <br>
x0=263;y0=263;y1=275;x1=275;  <br>
for(i=0;i&lt;=18;i++)  <br>
{  <br>
setcolor(1);  <br>
rectangle(x0,y0,x1,y1);  <br>
x0=x0-5;  <br>
y0=y0-5;  <br>
x1=x1+5;  <br>
y1=y1+5;  <br>
}  <br>
settextstyle(DEFAULT_FONT,HORIZ_DIR,2);  <br>
outtextxy(150,40,"How beautiful it is!");  <br>
line(130,60,480,60);  <br>
setcolor(2);  <br>
circle(269,269,137);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-45"><strong>程序 45：</strong></h3>

<p>题目：打印出杨辉三角形（要求打印出 10 行如下图）  <br>
1.程序分析：  <br>
1  <br>
1 1  <br>
1 2 1  <br>
1 3 3 1  <br>
1 4 6 4 1  <br>
1 5 10 10 5 1  <br>
2.程序源代码：  <br>
main()  <br>
{int i,j; <br>
int a[10][10];  <br>
printf("\n");  <br>
for(i=0;i&lt;10;i++)  <br>
{a[i][0]=1;  <br>
a[i][i]=1;}  <br>
for(i=2;i&lt;10;i++)  <br>
for(j=1;j a[i][j]=a[i -1][j -1]+a[i -1][j];  <br>
for(i=0;i&lt;10;i++)  <br>
{for(j=0;j&lt;=i;j++)  <br>
printf("]",a[i][j]);  <br>
printf("\n");  <br>
}  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-46"><strong>程序 46：</strong></h3>

<p>题目：学习 putpixel 画点。  <br>
1.程序分析：  <br>
2.程序源代码： </p>

<p>"graphics.h"  <br>
main()  <br>
{  <br>
int i,j,driver=VGA,mode= VGAHI;  <br>
initgraph(&amp;driver,&amp;mode,"");  <br>
setbkcolor(YELLOW);  <br>
for(i=50;i&lt;=230;i+=20)  <br>
for(j=50;j&lt;=230;j++)  <br>
putpixel(i,j,1);  <br>
for(j=50;j&lt;=230;j+=20)  <br>
for(i=50;i&lt;=230;i++)  <br>
putpixel(i,j,1);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-47"><strong>程序 47：</strong></h3>

<p>题目：画椭圆 ellipse  <br>
1.程序分析：  <br>
2.程序源代码： </p>

<p>"graphics.h"  <br>
 "conio.h"  <br>
main()  <br>
{  <br>
int x=360,y=160,driver=VGA,mode=VGAHI;  <br>
int num=20,i; <br>
int top,bottom;  <br>
initgraph(&amp;driver,&amp;mode,"");  <br>
top=y-30;  <br>
bottom=y-30;  <br>
for(i=0;i{  <br>
ellipse(250,250,0,360,top,bottom);  <br>
top-=5;  <br>
bottom+=5;  <br>
}  <br>
getch();  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-68"><strong>程序 68：</strong></h3>

<p>题目：有 n 个整数，使其前面各数顺序向后移 m 个位置，最后 m 个数变成最前面的 m 个数  <br>
1.程序分析：  <br>
2. 程序源代码：  <br>
main()  <br>
{  <br>
int number[20],n,m,i;  <br>
printf("the total numbers is:");  <br>
scanf("%d",&amp;n);  <br>
printf("back m:");  <br>
scanf("%d",&amp;m);  <br>
for(i=0;i scanf("%d,",&amp;number[i]);  <br>
scanf("%d",&amp;number[n-1]);  <br>
move(number,n,m);  <br>
for(i=0;i printf("%d,",number[i]);  <br>
printf("%d",number[n-1]);  <br>
}  <br>
move(array,n,m)  <br>
int n,m,array[20];  <br>
{  <br>
int <em>p,array_end;  <br>
array_end=</em>(array+n-1);  <br>
for(p=array+n-1;p&gt;array;p --)  <br>
<em>p=</em>(p-1);  <br>
*array=array_end;  <br>
m--; <br>
if(m&gt;0) move(array,n,m);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-69"><strong>程序 69：</strong></h3>

<p>题目：有 n 个人围成一圈，顺序排号。从第一个人开始报数（从 1 到 3 报数），凡报到 3 的 <br>
人退出  <br>
圈子，问最后留下的是原来第几号的那位。  <br>
1.  程序分析：  <br>
2.程序源代码：  <br>
define nmax 50  <br>
main()  <br>
{  <br>
int i,k,m,n,num[nmax],*p;  <br>
printf("please input the total of numbers:");  <br>
scanf("%d",&amp;n);  <br>
p=num;  <br>
for(i=0;i <em>(p+i)=i+1;  <br>
i =0;  <br>
k=0;  <br>
m=0;  <br>
while(m {  <br>
if(</em>(p+i)!=0) k++;  <br>
if(k==3)  <br>
{ *(p+i)=0;  <br>
k=0;  <br>
m++;  <br>
}  <br>
i++;  <br>
if(i==n) i=0;  <br>
}  <br>
while(*p==0) p++;  <br>
printf("%d is left\n",*p);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-72"><strong>程序 72：</strong></h3>

<p>题目：创建一个链表。  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
/<em>creat a list</em>/  <br>
 "stdlib.h" </p>

<p>struct list  <br>
{ int data;  <br>
struct list *next;  <br>
};  <br>
typedef struct list node;  <br>
typedef node *link;  <br>
void main()  <br>
{ link ptr,head;  <br>
int num,i;  <br>
ptr=(link)malloc(sizeof(node));  <br>
ptr=head;  <br>
printf("please input 5 numbers==&gt;\n");  <br>
for(i=0;i&lt;=4;i++)  <br>
{  <br>
scanf("%d",&amp;num);  <br>
ptr-&gt;data=num;  <br>
ptr-&gt;next=(link)malloc(sizeof(node));  <br>
if(i==4) ptr -&gt;next=NULL;  <br>
else ptr=ptr-&gt;next;  <br>
}  <br>
ptr=head;  <br>
while(ptr!=NULL)  <br>
{ printf("The value is ==&gt;%d\n",ptr-&gt;data);  <br>
ptr=ptr-&gt;next;  <br>
} <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-73"><strong>程序 73：</strong></h3>

<p>题目：反向输出一个链表。  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
/<em>reverse output a list</em>/  <br>
 "stdlib.h" </p>

<p>struct list  <br>
{ int data;  <br>
struct list *next;  <br>
};  <br>
typedef struct list node;  <br>
typedef node *link;  <br>
void main()  <br>
{ link ptr,head,tail;  <br>
int num,i;  <br>
tail=(link)malloc(sizeof(node));  <br>
tail -&gt;next=NULL;  <br>
ptr=tail;  <br>
printf("\nplease input 5 data==&gt;\n");  <br>
for(i=0;i&lt;=4;i++)  <br>
{  <br>
scanf("%d",&amp;num);  <br>
ptr-&gt;data=num;  <br>
head=(link)malloc(sizeof(node));  <br>
head-&gt;next=ptr;  <br>
ptr=head;  <br>
}  <br>
ptr=ptr-&gt;next;  <br>
while(ptr!=NULL)  <br>
{ printf("The value is ==&gt;%d\n",ptr-&gt;data);  <br>
ptr=ptr-&gt;next;  <br>
}} </p>

<div class="md-section-divider"></div>

<h3 id="程序-74"><strong>程序 74：</strong></h3>

<p>题目：连接两个链表。  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
 "stdlib.h" </p>

<p>struct list  <br>
{ int data; <br>
struct list *next;  <br>
};  <br>
typedef struct list node;  <br>
typedef node *link;  <br>
link delete_node( link pointer,link tmp)  <br>
{if (tmp==NULL) /<em>delete fir st node</em>/  <br>
return pointer-&gt;next;  <br>
else  <br>
{ if(tmp-&gt;next- &gt;next==NULL)/<em>delete last node</em>/  <br>
tmp-&gt;next=NULL;  <br>
else /<em>delete the other node</em>/  <br>
tmp-&gt;next=tmp-&gt;next- &gt;next;  <br>
return pointer;  <br>
}  <br>
}  <br>
void selection_sort(link pointer,int num)  <br>
{ link tmp,btmp;  <br>
int i, min;  <br>
for(i=0;i {  <br>
tmp=pointer;  <br>
min=tmp-&gt;data;  <br>
btmp=NULL;  <br>
while(tmp-&gt;next)  <br>
{ if(min&gt;tmp-&gt;next-&gt;data)  <br>
{min=tmp-&gt;next-&gt;data;  <br>
btmp=tmp;  <br>
}  <br>
tmp=tmp-&gt;next;  <br>
}  <br>
printf("\40: %d\n",min);  <br>
pointer=delete_node(pointer,btmp);  <br>
}  <br>
}  <br>
link create_list(int array[],int num)  <br>
{ link tmp1,tmp2,pointer;  <br>
int i;  <br>
pointer=(link)malloc(sizeof(node));  <br>
pointer-&gt;data=array[0];  <br>
tmp1=pointer;  <br>
for(i=1;i{ tmp2=(link)malloc(sizeof(node));  <br>
tmp2-&gt;next=NULL;  <br>
tmp2-&gt;data=array[i];  <br>
tmp1-&gt;next=tmp2;  <br>
tmp1=tmp1-&gt;next; <br>
}  <br>
return  pointer;  <br>
}  <br>
link concatenate(link pointer1,link pointer2)  <br>
{ link tmp;  <br>
tmp=pointer1;  <br>
while(tmp-&gt;next)  <br>
tmp=tmp-&gt;next;  <br>
tmp-&gt;next=pointer2;  <br>
return pointer1;  <br>
}  <br>
void main(void)  <br>
{ int arr1[]={3,12,8,9,11};  <br>
link ptr;  <br>
ptr=create_list(arr1,5);  <br>
selection_sort(ptr,5);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-76"><strong>程序 76：</strong></h3>

<p>题目：编写一个函数，输入 n 为偶数时，调用函数求 1/2+1/4+...+1/n,当输入 n 为奇数时，调 <br>
用函数  <br>
1/1+1/3+...+1/n(利用指针函数) <br>
1.程序分析：  <br>
2.程序源代码：  <br>
main() </p>

<p>main()  <br>
{  <br>
float peven(),podd(),dcall();  <br>
float sum;  <br>
int n;  <br>
while (1)  <br>
{  <br>
scanf("%d",&amp;n);  <br>
if(n&gt;1)  <br>
break;  <br>
}  <br>
if(n%2==0)  <br>
{  <br>
printf("Even=");  <br>
sum=dcall(peven,n);  <br>
}  <br>
else  <br>
{  <br>
printf("Odd=");  <br>
sum=dcall(podd,n);  <br>
}  <br>
printf("%f",sum);  <br>
}  <br>
float peven(int n)  <br>
{  <br>
float s;  <br>
int i;  <br>
s=1;  <br>
for(i=2;i&lt;=n;i+=2)  <br>
s+=1/(float)i;  <br>
return(s);  <br>
}  <br>
float podd(n)  <br>
int n;  <br>
{  <br>
float s;  <br>
int i;  <br>
s=0;  <br>
for(i=1;i&lt;=n;i+=2)  <br>
s+=1/(float)i; <br>
return(s);  <br>
}  <br>
float dcall(fp,n)  <br>
float (*fp)();  <br>
int n;  <br>
{  <br>
float s;  <br>
s=(*fp)(n);  <br>
return(s);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-80"><strong>程序 80：</strong></h3>

<p>题目：海滩上有一堆桃子，五只猴子来分。第一只猴子把这堆桃子凭据分为五份，多了一个， <br>
这只  <br>
猴子把多的一个扔入海中，拿走了一份。第二只猴子把剩下的桃子又平均分成五份，又多了  <br>
一个，它同样把多的一个扔入海中，拿走了一份，第三、第四、第五只猴子都是这样做的， <br>
问海滩上原来最少有多少个桃子？  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
main()  <br>
{int i,m,j,k,count;  <br>
for(i=4;i&lt;10000;i+=4)  <br>
{ count=0;  <br>
m=i;  <br>
for(k=0;k&lt;5;k++)  <br>
{  <br>
j=i/4*5+1;  <br>
i =j;  <br>
if(j%4==0) <br>
count++;  <br>
else  <br>
break;  <br>
}  <br>
i=m;  <br>
if(count==4)  <br>
{printf("%d\n",count);  <br>
break;}  <br>
}  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-81"><strong>程序 81：</strong></h3>

<p>题目：809*??=800*??+9*??+1  其中??代表的两位数,8*??的结果为两位数，9*?? 的结果为 3 <br>
位数。求??代表的两位数，及 809*??后的结果。  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
output(long b,long i)  <br>
{ printf("\n%ld/%ld=809*%ld+%ld",b,i,i,b%i);  <br>
}  <br>
main()  <br>
{long int a,b,i;  <br>
a=809;  <br>
for(i=10;i&lt;100;i++)  <br>
{b=i*a+1;  <br>
if(b&gt;=1000&amp;&amp;b&lt;=10000&amp;&amp;8*i&lt;100&amp;&amp;9*i&gt;=100)  <br>
output(b,i); }  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-82"><strong>程序 82：</strong></h3>

<p>题目：八进制转换为十进制  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
main()  <br>
{ char <em>p,s[6];int n;  <br>
p=s;  <br>
gets(p);  <br>
n=0;  <br>
while(</em>(p)!='\0')  <br>
{n=n*8+*p-'0';  <br>
p++;}  <br>
printf("%d",n);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-83"><strong>程序 83：</strong></h3>

<p>题目：求 0—7 所能组成的奇数个数。 <br>
1.程序分析：  <br>
2.程序源代码：  <br>
main()  <br>
{  <br>
long sum=4,s=4; <br>
int j;  <br>
for(j=2;j&lt;=8;j++)/<em>j is place of number</em>/  <br>
{ printf("\n%ld",sum);  <br>
if(j&lt;=2)  <br>
s*=7;  <br>
else  <br>
s*=8;  <br>
sum+=s;}  <br>
printf("\nsum=%ld",sum);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-84"><strong>程序 84：</strong></h3>

<p>题目：一个偶数总能表示为两个素数之和。  <br>
1.程序分析：  <br>
2.程序源代码： </p>

<p>main()  <br>
{ int a,b,c,d;  <br>
scanf("%d",&amp;a);  <br>
for(b=3;b&lt;=a/2;b+=2)  <br>
{ for(c=2;c&lt;=sqrt(b);c++)  <br>
if(b%c==0) break;  <br>
if(c&gt;sqrt(b))  <br>
d=a-b;  <br>
else  <br>
break;  <br>
for(c=2;c&lt;=sqrt(d);c++)  <br>
if(d%c==0) break;  <br>
if(c&gt;sqrt(d))  <br>
printf("%d=%d+%d\n",a,b,d);  <br>
}  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-85"><strong>程序 85：</strong></h3>

<p>题目：判断一个素数能被几个 9 整除  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
main() <br>
{ long int m9=9,sum=9;  <br>
int zi,n1=1,c9=1;  <br>
scanf("%d",&amp;zi);  <br>
while(n1!=0)  <br>
{ if(!(sum%zi))  <br>
n1=0;  <br>
else  <br>
{m9=m9*10;  <br>
sum=sum+m9;  <br>
c9++;  <br>
}  <br>
}  <br>
printf("%ld,can be divided by %d  \"9\"",sum,c9);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-88"><strong>程序 88：</strong></h3>

<p>题目：读取 7 个数（1—50）的整数值，每读取一个值，程序打印出该值个数的＊。  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
main()  <br>
{int i,a,n=1;  <br>
while(n&lt;=7)  <br>
{ do {  <br>
scanf("%d",&amp;a);  <br>
}while(a&lt;1||a&gt;50);  <br>
for(i=1;i&lt;=a;i++)  <br>
printf("*");  <br>
printf("\n");  <br>
n++;}  <br>
getch();  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-89"><strong>程序 89：</strong></h3>

<p>题目：某个公司采用公用电话传递数据，数据是四位的整数，在传递过程中是加密的，加密 <br>
规则如下：  <br>
每位数字都加上 5,然后用和除以 10 的余数代替该数字，再将第一位和第四位交换，第二位 <br>
和第三位交换。  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
main()  <br>
{int a,i,aa[4],t;  <br>
scanf("%d",&amp;a); <br>
aa[0]=a ;  <br>
aa<a href="http://weibo.com/u/2732911514" target="_blank">1</a>=a 0/10;  <br>
aa[2]=a 00/100;  <br>
aa[3]=a/1000;  <br>
for(i=0;i&lt;=3;i++)  <br>
{aa[i]+=5;  <br>
aa[i]%=10;  <br>
}  <br>
for(i=0;i&lt;=3/2;i++)  <br>
{t=aa[i];  <br>
aa[i]=aa[3-i];  <br>
aa[3-i]=t;  <br>
}  <br>
for(i=3;i&gt;=0;i --)  <br>
printf("%d",aa[i]);  <br>
} </p>

<div class="md-section-divider"></div>

<h3 id="程序-94"><strong>程序 94：</strong></h3>

<p>题目：时间函数举例 4,一个猜数游戏，判断一个人反应快慢。（版主初学时编的）  <br>
1.程序分析：  <br>
2.程序源代码：  <br>
 "time.h" <br>
 "stdlib.h" </p>

<p>main()  <br>
{char c;  <br>
clock_t start,end;  <br>
time_t a,b;  <br>
double var;  <br>
int i,guess;  <br>
srand(time(NULL));  <br>
printf("do you want to play it.('y' or 'n')  \n");  <br>
loop:  <br>
while((c=getchar())=='y')  <br>
{  <br>
i=rand() 0;  <br>
printf("\nplease input number you guess:\n");  <br>
start=clock();  <br>
a=time(NULL);  <br>
scanf("%d",&amp;guess);  <br>
while(guess!=i)  <br>
{if(guess&gt;i)  <br>
{printf("please input a little smaller. \n");  <br>
scanf("%d",&amp;guess);}  <br>
else  <br>
{printf("please input a little bigger. \n");  <br>
scanf("%d",&amp;guess);}  <br>
}  <br>
end=clock();  <br>
b=time(NULL);  <br>
printf("\1: It took you %6.3f seconds \n",var=(double)(end-start)/18.2);  <br>
printf("\1: it took you %6.3f seconds \n \n",difftime(b,a));  <br>
if(var&lt;15)  <br>
printf("\1\1 You are very clever!  \1\1\n \n");  <br>
else if(var&lt;25)  <br>
printf("\1\1 you are normal! \1\1\n\n");  <br>
else  <br>
printf("\1\1 you are stupid! \1\1\n\n");  <br>
printf("\1\1 Congradulations \1\1\n\n");  <br>
printf("The number you guess is %d",i);  <br>
}  <br>
printf("\ndo you want to try it again?(\"yy\".or. \"n\")\n");  <br>
if((c=getch())=='y')  <br>
goto loop;  <br>
}</p></div>
    <div class="remark-icons">
    </div>
</div>

<!--in page preview buttons. -->
<div class="in-page-preview-buttons in-page-preview-buttons-full-reader">
    <ul>
        <li class="in-page-button dropdown" id="preview-toc-button" title="内容目录 Ctrl+Alt+O">
            <span class="dropdown-toggle icon-list" data-toggle="dropdown"></span>
            <div id="toc-list" class="dropdown-menu theme pull-right"> <!-- Add theme means this element will be changed when apply theme color. -->
                <h3>内容目录</h3>
                <hr>
                <div class="table-of-contents"></div>
            </div>
        </li>
    </ul>
</div>

<div id="reader-full-toolbar" class="reader-full-toolbar-shown" style="padding-top: 0;">
    <ul id="reader-full-toolbar-home" class="preview-button-row">
        <li class="preview-button-full-reader" id="preview-editor-button" title="撰写文本 Ctrl+Alt+M">
            <span class="icon-pencil"></span>
        </li>
    </ul>
    <ul id="preview-button-row" class="preview-button-row">
        <li class="preview-button-full-reader dropdown" id="preview-list-button" title="文本列表 Ctrl+Alt+F">
            <span class="dropdown-toggle icon-reorder" data-toggle="dropdown"></span>
            <ul id="file-list" class="dropdown-menu theme-black pull-right" role="menu">
                    <li>
                    <ul class="tag-list">
                        <li class="tag-item item" tag-name="Golang">
                            <span class="pull-left"><i class="icon-tag"></i><span class="tag-name">Golang</span></span>
                            <span class="tag-count pull-right">1</span>
                            <div class="clearfix"></div>
                        </li>
                            
    <li class="file-item item" file-created-date="2014-09-09 19:54:59">
        <a tabindex="-1" href="https://www.zybuluo.com/Gestapo/note/32082" title="【已发布】 2014-09-11 18:17">
        <i class="icon-share-sign"></i>
        <span id="32082" class="whiter-on-black">Golang编程百例</span>
        </a>
    </li>

                    </ul>
                    </li>
            </ul>
            <ul id="file-list-topbar" class="dropdown-menu theme-black pull-right" role="menu">
                <li id="search-file-bar">
                    <i class="icon-search icon-large"></i>
                    <input type="text" id="search-file-textbox" placeholder="搜索 Gestapo 的文稿标题， * 显示全部">
                    <i class="icon-level-down icon-rotate-90 icon-large"></i>
                </li>
                <li id="tag-file-bar">
                    以下【标签】将用于标记这篇文稿：
                </li>
            </ul>
        </li>
        <li class="preview-button-full-reader" id="preview-theme-button" title="主题切换 Ctrl+Alt+J">
            <span class="icon-adjust"></span>
        </li>
        <li class="preview-button-full-reader" id="preview-fullscreen-button" title="全屏模式 F11">
            <span class="icon-fullscreen"></span>
        </li>
        <li class="preview-button-full-reader wmd-spacer"></li>
        <li class="preview-button-full-reader dropdown" id="preview-about-button" title="关于本站">
            <span class="dropdown-toggle icon-info-sign" data-toggle="dropdown" data-hover="dropdown" data-delay="100" data-close-others="true"></span>
            <ul id="about-menu" class="dropdown-menu theme-black pull-right" role="menu">
                <li title="support@zybuluo.com"><a tabindex="-1" href="mailto:support@zybuluo.com" target="_blank"><i class="icon-envelope"></i>联系我们</a></li>
                <li title="@ghosert"><a tabindex="-1" href="http://www.weibo.com/ghosert" target="_blank"><i class="icon-weibo"></i>关注开发者</a></li>
                <li title=""><a tabindex="-1" href="https://github.com/ghosert/cmd-editor/issues" target="_blank"><i class="icon-github-alt"></i>报告问题，建议</a></li>
            </ul>
        </li>
    </ul>
</div>
<ul id="reader-full-toolbar-tail" class="reader-full-toolbar-tail-shown">
    <li class="preview-button-full-reader" id="preview-hidden-button" title="隐藏工具栏 Ctrl+Alt+I">
        <span class="icon-chevron-sign-right"></span>
    </li>
</ul>






<!-- side remark, hidden when loading. -->
<div class="remark-list side-remark-hidden">
    <div class="remark-items">
    </div>
    <div class="leave-remark unselectable"><span class='icon-plus-sign-alt'></span><span>添加新批注</span></div>
    <div class="new-remark">
        <!-- clone the template $('.new-remark-reply').html() to here.-->
        <div class="remark-notice">在作者公开此批注前，只有你和作者可见。</div>
    </div>
</div>

<!-- template for new remark/reply -->
<div class="new-remark-reply side-remark-hidden">
    <div class="remark-head"><a><img src="https://www.zybuluo.com/static/img/default-head.jpg"></a></div>
    <div class="remark-author unselectable"><strong></strong></div>
    <div class="remark-editor" contentEditable="true" spellcheck="false"></div>
    <!-- this will be filled up by js.
    <div class="inline-error">402/400</div> for new remark
    <div class="inline-error">202/200</div> for new reply
    -->
    <div class="remark-footer unselectable">
        <button class="remark-save btn-link">保存</button>
        <button class="remark-cancel btn-link">取消</button>
    </div>
</div>

<!-- template for .remark-item/.remark-reply -->
<div class="remark-item-reply side-remark-hidden">
    <div class="remark-head"><a><img src="https://www.zybuluo.com/static/img/default-head.jpg"></a></div>
    <div class="remark-author unselectable"></div>
    <div class="remark-delete-link unselectable"><span class="icon-remove"></span></div> <!--This is mainly for deleting remark-reply, shown when author/remark hovering on remark-reply.-->
    <div class="remark-editor" contentEditable="true" spellcheck="false"></div>
    <!-- this will be filled up by js.
    <div class="inline-error">402/400</div> for new remark
    <div class="inline-error">202/200</div> for new reply
    -->
    <div class="remark-footer unselectable">
        <button class="remark-edit btn-link">修改</button>
        <button class="remark-save btn-link">保存</button>
        <button class="remark-cancel btn-link">取消</button>
        <button class="remark-delete btn-link">删除</button>
    </div>
</div>

<!-- template for remark-item-->
<div class="remark-item side-remark-hidden" data-rand-id="" data-version-id="">
    <div class="remark-published-link unselectable"><span class="icon-link icon-rotate-90"></span></div>
    <ul class="remark-options theme unselectable">
        <li class="remark-private"><span class="icon-eye-close"></span><span>私有</span></li>
        <li class="remark-public"><span class="icon-group"></span><span>公开</span></li>
        <li class="remark-delete"><span class="icon-remove"></span><span>删除</span></li>
    </ul>

    <!-- clone the template $('.remark-item-reply').html() to here.-->

    <button class="remark-reply-view-more btn-link">查看更早的 5 条回复</button>
    <div class="remark-replies">
        <!--
        <div class="remark-reply">
            clone the template $('.remark-item-reply').html() to here.
        </div>
        -->
    </div>

    <div class="leave-reply unselectable"><span>回复批注</span></div>
    <div class="new-reply">
        <!-- clone the template $('.new-remark-reply').html() to here.-->
    </div>
</div>

<!-- jiawzhang NOTICE: .remark-icons will be put to mdeditor.mako and user_note.mako, where next to .wmd-preview -->
<!-- <div class="remark-icons"></div> -->

<!-- template for remark-icon -->
<div class="remark-icon unselectable side-remark-hidden">
    <span class="icon-stack">
        <i class="glyph-comment"></i>
        <span class="remark-count"></span>
    </span>
</div>


    


    <!-- Hidden Popup Modal -->
    <div id="notification" class="modal hide fade theme" tabindex="-1" role="dialog" aria-labelledby="notification-title" aria-hidden="true">
        <div class="modal-header theme">
            <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>
            <h3 id="notification-title">通知</h3>
        </div>
        <div class="modal-body theme">
            <p></p>
        </div>
        <div class="modal-footer theme">
            <button id="notification-cancel" class="btn" data-dismiss="modal" aria-hidden="true">取消</button>
            <button id="notification-confirm" class="btn btn-primary">确认</button>
        </div>
    </div>

    <!-- zybuluo's foot -->

    <script src="https://www.zybuluo.com/static/assets/3ad9f7a4.base.lib.min.js"></script>

    
    <!--mathjax-->
    <script type="text/x-mathjax-config">
      MathJax.Hub.Config({ tex2jax: { inlineMath: [['$','$'], ["\\(","\\)"]], processEscapes: true },  messageStyle: "none"});
    </script>
    <script src="https://www.zybuluo.com/static/editor/libs/mathJax.js"></script>
    <!--mathjax source code is here: https://github.com/mathjax/MathJax.-->
    <script src="https://www.zybuluo.com/static/MathJax/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>

    <script>
        Namespace('com.zybuluo.mdeditor.layout');
        com.zybuluo.mdeditor.layout.initData = {
            loggedInUsername: '', // '' means not logged in, otherwise the logged in username.
            isPageOwner: 'False' === 'True' ? true : false,
            loginComeFromUrl: 'https://www.zybuluo.com/login?return_to=https%3A%2F%2Fwww.zybuluo.com%2FGestapo%2Fnote%2F32082',
            noteRemarksUrl: "https://www.zybuluo.com/note/32082/remarks", 
            newNoteRemarkUrl: "https://www.zybuluo.com/note/32082/remark/new", 
            updateNoteRemarkUrl: "https://www.zybuluo.com/note/32082/remark/update", 
            deleteNoteRemarkUrl: "https://www.zybuluo.com/note/32082/remark/delete", 
            publishNoteRemarkUrl: "https://www.zybuluo.com/note/32082/remark/publish", 
            newNoteRemarkReplyUrl: "https://www.zybuluo.com/note/32082/remark_reply/new", 
            updateNoteRemarkReplyUrl: "https://www.zybuluo.com/note/32082/remark_reply/update", 
            deleteNoteRemarkReplyUrl: "https://www.zybuluo.com/note/32082/remark_reply/delete", 
        };

        // BEGIN: pace.js configuration
        window.paceOptions = {
            // disable others, enable for ajax call only,
            ajax: true,
            document: false,
            elements: false,
            eventLag: false,
        };
        // jiawzhang NOTICE: to make sure pace.js is working for any ajax call especially the jquery ajax, add 'Pace.restart()' into jquery ajax call like '$.post'
        // Originally, pace 0.5.6 doesn't support jquery ajax, see details in: https://github.com/HubSpot/pace/issues/29
        // END: pace.js configuration

    </script>

    <script src="https://www.zybuluo.com/static/assets/mdeditor/5cdaccfd.layout.lib.min.js"></script>

    <script src="https://www.zybuluo.com/static/assets/mdeditor/dfc0de7d.layout.min.js"></script>



    

    <!-- https://www.zybuluo.com/static/assets/mdeditor/user_note.lib.min.js -->
    <!-- -->

    <script>
        Namespace('com.zybuluo.mdeditor.user_note');
        com.zybuluo.mdeditor.user_note.initData = {
            isLoggedIn: 'False',
            mdeditorUrl: "https://www.zybuluo.com/mdeditor",
        };
    </script>

    <script src="https://www.zybuluo.com/static/assets/mdeditor/a0cb3f30.user_note.min.js"></script>




    <script>
        var globalUnverifiedEmailAlert = $('#global-unverified-email-alert');
        $('#close-global-unverified-email-alert').on('click', function (event) {
            event.preventDefault();
            globalUnverifiedEmailAlert.alert('close');
        });
        // Resize window when close '#global-unverified-email-alert' to make sure the page UI is correct. such as mdeditor/user_note page and reset the location of the remark icons.
        globalUnverifiedEmailAlert.bind('closed', function () {
            setTimeout(function () {
                $(window).resize();
            }, 250);
        });
    </script>

</body>
</html>
    
